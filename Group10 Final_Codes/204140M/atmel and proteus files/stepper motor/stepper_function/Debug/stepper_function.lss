
stepper_function.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000829  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 23 01 	call	0x246	; 0x246 <main>
  64:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Stepper_motor>:

void Stepper_motor(){
	
	//Set a1, a2, a3, a4 as output

	DDRD |= a1 | a2 | a3| a4;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6f       	ori	r24, 0xF0	; 240
  70:	81 bb       	out	0x11, r24	; 17

	//Set input & pull-up resistor

	DDRD &= ~SW;
  72:	81 b3       	in	r24, 0x11	; 17
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	81 bb       	out	0x11, r24	; 17

	PORTD |= SW;
  78:	82 b3       	in	r24, 0x12	; 18
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	82 bb       	out	0x12, r24	; 18
	
	DDRD &= ~SW2;
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	81 bb       	out	0x11, r24	; 17

	PORTD |= SW2;
  84:	82 b3       	in	r24, 0x12	; 18
  86:	84 60       	ori	r24, 0x04	; 4
  88:	82 bb       	out	0x12, r24	; 18
	
	while(1){
		
		if((PIND & SW) && (PIND & SW2)){
  8a:	83 9b       	sbis	0x10, 3	; 16
  8c:	fe cf       	rjmp	.-4      	; 0x8a <Stepper_motor+0x1e>
  8e:	82 9b       	sbis	0x10, 2	; 16
  90:	fc cf       	rjmp	.-8      	; 0x8a <Stepper_motor+0x1e>

			while(1){
				
				if((!(PIND & SW2))){
  92:	82 99       	sbic	0x10, 2	; 16
  94:	6c c0       	rjmp	.+216    	; 0x16e <Stepper_motor+0x102>
					while(1){
						if((!(PIND & SW))){
  96:	83 99       	sbic	0x10, 3	; 16
  98:	fe cf       	rjmp	.-4      	; 0x96 <Stepper_motor+0x2a>
							PORTD |= a1;
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a3;
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8f 7b       	andi	r24, 0xBF	; 191
  aa:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a4;
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <Stepper_motor+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <Stepper_motor+0x56>
  c2:	00 00       	nop

							_delay_ms(50);



							PORTD |= a1;
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	82 bb       	out	0x12, r24	; 18

							PORTD  &= ~ a3;
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	82 bb       	out	0x12, r24	; 18

							PORTD |= a4;
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	82 bb       	out	0x12, r24	; 18
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <Stepper_motor+0x76>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Stepper_motor+0x80>
  ec:	00 00       	nop
							_delay_ms(20);
							
							

							
							PORTD &= ~a1;
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	8f 7d       	andi	r24, 0xDF	; 223
  f8:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a3;
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	8f 7b       	andi	r24, 0xBF	; 191
  fe:	82 bb       	out	0x12, r24	; 18

							PORTD |= a4;
 100:	82 b3       	in	r24, 0x12	; 18
 102:	80 68       	ori	r24, 0x80	; 128
 104:	82 bb       	out	0x12, r24	; 18
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	80 e7       	ldi	r24, 0x70	; 112
 10a:	92 e0       	ldi	r25, 0x02	; 2
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <Stepper_motor+0xa0>
 114:	00 c0       	rjmp	.+0      	; 0x116 <Stepper_motor+0xaa>
 116:	00 00       	nop

							_delay_ms(50);
							
							
							PORTD |= a1;
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~ a3;
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	82 bb       	out	0x12, r24	; 18

							PORTD |= a4;
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	82 bb       	out	0x12, r24	; 18
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 ef       	ldi	r24, 0xF9	; 249
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <Stepper_motor+0xca>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <Stepper_motor+0xd4>
 140:	00 00       	nop

							_delay_ms(20);
							
							
							
							PORTD |= a1;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	80 61       	ori	r24, 0x10	; 16
 146:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a3;
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	8f 7b       	andi	r24, 0xBF	; 191
 152:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a4;
 154:	82 b3       	in	r24, 0x12	; 18
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	82 bb       	out	0x12, r24	; 18
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	80 e7       	ldi	r24, 0x70	; 112
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <Stepper_motor+0xf4>
 168:	00 c0       	rjmp	.+0      	; 0x16a <Stepper_motor+0xfe>
 16a:	00 00       	nop
 16c:	92 cf       	rjmp	.-220    	; 0x92 <Stepper_motor+0x26>
					

				}
				

				else if(!(PIND & SW)){
 16e:	83 99       	sbic	0x10, 3	; 16
 170:	90 cf       	rjmp	.-224    	; 0x92 <Stepper_motor+0x26>
				

					


					PORTD |= a1;
 172:	82 b3       	in	r24, 0x12	; 18
 174:	80 61       	ori	r24, 0x10	; 16
 176:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a3;
 17e:	82 b3       	in	r24, 0x12	; 18
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 184:	82 b3       	in	r24, 0x12	; 18
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	82 bb       	out	0x12, r24	; 18
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	80 e7       	ldi	r24, 0x70	; 112
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <Stepper_motor+0x124>
 198:	00 c0       	rjmp	.+0      	; 0x19a <Stepper_motor+0x12e>
 19a:	00 00       	nop

					_delay_ms(50);



					PORTD |= a1;
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 1a2:	82 b3       	in	r24, 0x12	; 18
 1a4:	8f 7d       	andi	r24, 0xDF	; 223
 1a6:	82 bb       	out	0x12, r24	; 18

					PORTD |= a3;
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	8f 77       	andi	r24, 0x7F	; 127
 1b2:	82 bb       	out	0x12, r24	; 18
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <Stepper_motor+0x14e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <Stepper_motor+0x158>
 1c4:	00 00       	nop
					_delay_ms(20);
					
					

					
					PORTD &= ~a1;
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	8f 7e       	andi	r24, 0xEF	; 239
 1ca:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 1cc:	82 b3       	in	r24, 0x12	; 18
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	82 bb       	out	0x12, r24	; 18

					PORTD |= a3;
 1d2:	82 b3       	in	r24, 0x12	; 18
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 1d8:	82 b3       	in	r24, 0x12	; 18
 1da:	8f 77       	andi	r24, 0x7F	; 127
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	80 e7       	ldi	r24, 0x70	; 112
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <Stepper_motor+0x178>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Stepper_motor+0x182>
 1ee:	00 00       	nop

					_delay_ms(50);
					
					
					PORTD |= a1;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	8f 7d       	andi	r24, 0xDF	; 223
 1fa:	82 bb       	out	0x12, r24	; 18

					PORTD |= a3;
 1fc:	82 b3       	in	r24, 0x12	; 18
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 202:	82 b3       	in	r24, 0x12	; 18
 204:	8f 77       	andi	r24, 0x7F	; 127
 206:	82 bb       	out	0x12, r24	; 18
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	89 ef       	ldi	r24, 0xF9	; 249
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <Stepper_motor+0x1a2>
 216:	00 c0       	rjmp	.+0      	; 0x218 <Stepper_motor+0x1ac>
 218:	00 00       	nop

					_delay_ms(20);
					
					
					
					PORTD |= a1;
 21a:	82 b3       	in	r24, 0x12	; 18
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 220:	82 b3       	in	r24, 0x12	; 18
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a3;
 226:	82 b3       	in	r24, 0x12	; 18
 228:	8f 7b       	andi	r24, 0xBF	; 191
 22a:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 22c:	82 b3       	in	r24, 0x12	; 18
 22e:	8f 77       	andi	r24, 0x7F	; 127
 230:	82 bb       	out	0x12, r24	; 18
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	80 e7       	ldi	r24, 0x70	; 112
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <Stepper_motor+0x1cc>
 240:	00 c0       	rjmp	.+0      	; 0x242 <Stepper_motor+0x1d6>
 242:	00 00       	nop
 244:	22 cf       	rjmp	.-444    	; 0x8a <Stepper_motor+0x1e>

00000246 <main>:



int main(void){

	Stepper_motor();
 246:	0e 94 36 00 	call	0x6c	; 0x6c <Stepper_motor>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
