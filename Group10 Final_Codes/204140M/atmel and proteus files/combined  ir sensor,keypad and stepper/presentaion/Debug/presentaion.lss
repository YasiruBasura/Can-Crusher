
presentaion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  000007d0  00000864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000fc  008000fc  00000900  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000164b  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000716  00000000  00000000  0000200f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ee  00000000  00000000  00002725  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00003014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  000030e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d75  00000000  00000000  0000347d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000041f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3f       	cpi	r26, 0xFC	; 252
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac ef       	ldi	r26, 0xFC	; 252
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 30       	cpi	r26, 0x08	; 8
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 03 	call	0x75e	; 0x75e <main>
  8a:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdcmd>:
		}
	}
	
}
void lcdcmd(unsigned char cmd){
	PORTB &=~(1<<RS); //RS=0 for command (1111 1110)
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9e 7f       	andi	r25, 0xFE	; 254
  96:	98 bb       	out	0x18, r25	; 24
	PORTB &=~(1<<RW); //RW=0 for write (1111 1101)
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	98 bb       	out	0x18, r25	; 24
	LCD= cmd & 0xF0;  //Send upper nibble
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 bb       	out	0x15, r25	; 21
	PORTD|=(1<<EN); //EN=1 for H to L pulse
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	91 60       	ori	r25, 0x01	; 1
  a8:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e9       	ldi	r30, 0x9F	; 159
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcmd+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcdcmd+0x22>
  b4:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN); // EN=0 for H to L pulse
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	9e 7f       	andi	r25, 0xFE	; 254
  ba:	92 bb       	out	0x12, r25	; 18

	LCD = cmd<<4; // send low nibble;
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	85 bb       	out	0x15, r24	; 21
	PORTD |=(1<<EN); //EN=0for H to L pulse
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	8f e9       	ldi	r24, 0x9F	; 159
  ca:	9f e0       	ldi	r25, 0x0F	; 15
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdcmd+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdcmd+0x40>
  d2:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <lcddata>:
	}
}


void lcddata(unsigned char data){
	PORTB |= (1<<RS); //RS=1 for data
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	91 60       	ori	r25, 0x01	; 1
  e0:	98 bb       	out	0x18, r25	; 24
	PORTB &= ~(1<<RW); //RW=0 for write
  e2:	98 b3       	in	r25, 0x18	; 24
  e4:	9d 7f       	andi	r25, 0xFD	; 253
  e6:	98 bb       	out	0x18, r25	; 24
	LCD= data & 0xF0;  //Send upper nibble
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	95 bb       	out	0x15, r25	; 21
	PORTD|= (1<<EN); //EN=1 for H to L pulse
  ee:	92 b3       	in	r25, 0x12	; 18
  f0:	91 60       	ori	r25, 0x01	; 1
  f2:	92 bb       	out	0x12, r25	; 18
  f4:	ef e1       	ldi	r30, 0x1F	; 31
  f6:	fe e4       	ldi	r31, 0x4E	; 78
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcddata+0x1c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcddata+0x22>
  fe:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~(1<<EN); // EN=0 for H to L pulse
 100:	92 b3       	in	r25, 0x12	; 18
 102:	9e 7f       	andi	r25, 0xFE	; 254
 104:	92 bb       	out	0x12, r25	; 18

	LCD = data<<4; // send low nibble;
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	85 bb       	out	0x15, r24	; 21
	PORTD |=(1<<EN); //EN=1 for H to L pulse
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	82 bb       	out	0x12, r24	; 18
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcddata+0x3a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcddata+0x40>
 11c:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~(1<<EN);
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	82 bb       	out	0x12, r24	; 18
 124:	08 95       	ret

00000126 <lcd_Print>:
	PORTD |=(1<<EN); //EN=0for H to L pulse
	_delay_ms(1);
	PORTD &= ~(1<<EN);
}

void lcd_Print (char*str){
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	04 c0       	rjmp	.+8      	; 0x13e <lcd_Print+0x18>
	{
		lcddata(str[i]);
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 6e 00 	call	0xdc	; 0xdc <lcddata>
	PORTD &= ~(1<<EN);
}

void lcd_Print (char*str){
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	f8 01       	movw	r30, r16
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	80 81       	ld	r24, Z
 146:	81 11       	cpse	r24, r1
 148:	f6 cf       	rjmp	.-20     	; 0x136 <lcd_Print+0x10>
	{
		lcddata(str[i]);
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <lcd_init>:
	
}

void lcd_init(){
	//DDRC= 0xFF;
	DDRC= 0xF0; // Define  output LCD port(ALL c ports are outputs) 
 154:	80 ef       	ldi	r24, 0xF0	; 240
 156:	84 bb       	out	0x14, r24	; 20
	DDRD |=(1<<EN); //Define EN pin  as output
 158:	81 b3       	in	r24, 0x11	; 17
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF; // define RS and  RW pin as output
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
	PORTD&= ~(1<<EN); //initialize EN=0
 162:	82 b3       	in	r24, 0x12	; 18
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x33);
 168:	83 e3       	ldi	r24, 0x33	; 51
 16a:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x32);
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x28); // LCD in 4 bit mode
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x0E); //display on cursor on
 17a:	8e e0       	ldi	r24, 0x0E	; 14
 17c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	/*lcddata(72);
	lcddata(69);
	lcddata(76);
	lcddata(76);
	lcddata(79);*/
	lcd_Print("WELCOME");
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	83 ef       	ldi	r24, 0xF3	; 243
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <lcd_init+0x3a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x44>
 198:	00 00       	nop
	_delay_ms(40);
	lcdcmd(0x01); //clear LCD
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcd_Print("Enter the Number");
 1a0:	88 e6       	ldi	r24, 0x68	; 104
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
    lcdcmd(0xc0);//set the curser to second line 
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcd_Print("of cans and");
 1ae:	89 e7       	ldi	r24, 0x79	; 121
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ef       	ldi	r24, 0xF3	; 243
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <lcd_init+0x68>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_init+0x72>
 1c6:	00 00       	nop
	_delay_ms(40);
	lcdcmd(0x01); //clear LCD
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x80);//set the curser to first line 
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcd_Print("Press + to start");
 1d4:	85 e8       	ldi	r24, 0x85	; 133
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	83 ef       	ldi	r24, 0xF3	; 243
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <lcd_init+0x8e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x98>
 1ec:	00 00       	nop
	_delay_ms(40);
	 lcdcmd(0xc0);//set the curser to second line
 1ee:	80 ec       	ldi	r24, 0xC0	; 192
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	 lcd_Print("the process : ");
 1f4:	86 e9       	ldi	r24, 0x96	; 150
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
 1fc:	08 95       	ret

000001fe <keypad>:
	  //lcdcmd(0x80);
	 
}

unsigned char keypad(){
	PORTA=0b11111110; // make 1st row 0
 1fe:	8e ef       	ldi	r24, 0xFE	; 254
 200:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 202:	cc 99       	sbic	0x19, 4	; 25
 204:	08 c0       	rjmp	.+16     	; 0x216 <keypad+0x18>
 206:	8f ed       	ldi	r24, 0xDF	; 223
 208:	9e e2       	ldi	r25, 0x2E	; 46
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <keypad+0xc>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <keypad+0x12>
 210:	00 00       	nop
		_delay_ms(3);
		return '7';
 212:	87 e3       	ldi	r24, 0x37	; 55
 214:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 216:	cd 99       	sbic	0x19, 5	; 25
 218:	08 c0       	rjmp	.+16     	; 0x22a <keypad+0x2c>
 21a:	8f ed       	ldi	r24, 0xDF	; 223
 21c:	9e e2       	ldi	r25, 0x2E	; 46
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <keypad+0x20>
 222:	00 c0       	rjmp	.+0      	; 0x224 <keypad+0x26>
 224:	00 00       	nop
		_delay_ms(3);
		return '8';
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 22a:	ce 99       	sbic	0x19, 6	; 25
 22c:	08 c0       	rjmp	.+16     	; 0x23e <keypad+0x40>
 22e:	8f ed       	ldi	r24, 0xDF	; 223
 230:	9e e2       	ldi	r25, 0x2E	; 46
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <keypad+0x34>
 236:	00 c0       	rjmp	.+0      	; 0x238 <keypad+0x3a>
 238:	00 00       	nop
		_delay_ms(3);
		return '9';
 23a:	89 e3       	ldi	r24, 0x39	; 57
 23c:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 23e:	cf 99       	sbic	0x19, 7	; 25
 240:	08 c0       	rjmp	.+16     	; 0x252 <keypad+0x54>
 242:	8f ed       	ldi	r24, 0xDF	; 223
 244:	9e e2       	ldi	r25, 0x2E	; 46
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <keypad+0x48>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <keypad+0x4e>
 24c:	00 00       	nop
		_delay_ms(3);
		return '/';
 24e:	8f e2       	ldi	r24, 0x2F	; 47
 250:	08 95       	ret
	}
	PORTA=0b11111101;
 252:	8d ef       	ldi	r24, 0xFD	; 253
 254:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 256:	cc 99       	sbic	0x19, 4	; 25
 258:	08 c0       	rjmp	.+16     	; 0x26a <keypad+0x6c>
 25a:	8f ed       	ldi	r24, 0xDF	; 223
 25c:	9e e2       	ldi	r25, 0x2E	; 46
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <keypad+0x60>
 262:	00 c0       	rjmp	.+0      	; 0x264 <keypad+0x66>
 264:	00 00       	nop
		_delay_ms(3);
		return '4';
 266:	84 e3       	ldi	r24, 0x34	; 52
 268:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 26a:	cd 99       	sbic	0x19, 5	; 25
 26c:	08 c0       	rjmp	.+16     	; 0x27e <keypad+0x80>
 26e:	8f ed       	ldi	r24, 0xDF	; 223
 270:	9e e2       	ldi	r25, 0x2E	; 46
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <keypad+0x74>
 276:	00 c0       	rjmp	.+0      	; 0x278 <keypad+0x7a>
 278:	00 00       	nop
		_delay_ms(3);
		return '5';
 27a:	85 e3       	ldi	r24, 0x35	; 53
 27c:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 27e:	ce 99       	sbic	0x19, 6	; 25
 280:	08 c0       	rjmp	.+16     	; 0x292 <keypad+0x94>
 282:	8f ed       	ldi	r24, 0xDF	; 223
 284:	9e e2       	ldi	r25, 0x2E	; 46
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <keypad+0x88>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <keypad+0x8e>
 28c:	00 00       	nop
		_delay_ms(3);
		return '6';
 28e:	86 e3       	ldi	r24, 0x36	; 54
 290:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 292:	cf 99       	sbic	0x19, 7	; 25
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <keypad+0xa8>
 296:	8f ed       	ldi	r24, 0xDF	; 223
 298:	9e e2       	ldi	r25, 0x2E	; 46
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <keypad+0x9c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <keypad+0xa2>
 2a0:	00 00       	nop
		_delay_ms(3);
		return '+';
 2a2:	8b e2       	ldi	r24, 0x2B	; 43
 2a4:	08 95       	ret
	}
	PORTA=0b11111011;
 2a6:	8b ef       	ldi	r24, 0xFB	; 251
 2a8:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 2aa:	cc 99       	sbic	0x19, 4	; 25
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <keypad+0xc0>
 2ae:	8f ed       	ldi	r24, 0xDF	; 223
 2b0:	9e e2       	ldi	r25, 0x2E	; 46
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <keypad+0xb4>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <keypad+0xba>
 2b8:	00 00       	nop
		_delay_ms(3);
		return '1';
 2ba:	81 e3       	ldi	r24, 0x31	; 49
 2bc:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 2be:	cd 99       	sbic	0x19, 5	; 25
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <keypad+0xd4>
 2c2:	8f ed       	ldi	r24, 0xDF	; 223
 2c4:	9e e2       	ldi	r25, 0x2E	; 46
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <keypad+0xc8>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <keypad+0xce>
 2cc:	00 00       	nop
		_delay_ms(3);
		return '2';
 2ce:	82 e3       	ldi	r24, 0x32	; 50
 2d0:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 2d2:	ce 99       	sbic	0x19, 6	; 25
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <keypad+0xe8>
 2d6:	8f ed       	ldi	r24, 0xDF	; 223
 2d8:	9e e2       	ldi	r25, 0x2E	; 46
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <keypad+0xdc>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <keypad+0xe2>
 2e0:	00 00       	nop
		_delay_ms(3);
		return '3';
 2e2:	83 e3       	ldi	r24, 0x33	; 51
 2e4:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 2e6:	cf 99       	sbic	0x19, 7	; 25
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <keypad+0xfc>
 2ea:	8f ed       	ldi	r24, 0xDF	; 223
 2ec:	9e e2       	ldi	r25, 0x2E	; 46
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <keypad+0xf0>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <keypad+0xf6>
 2f4:	00 00       	nop
		_delay_ms(3);
		return '-';
 2f6:	8d e2       	ldi	r24, 0x2D	; 45
 2f8:	08 95       	ret
	}
	PORTA=0b11110111;
 2fa:	87 ef       	ldi	r24, 0xF7	; 247
 2fc:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 2fe:	cc 99       	sbic	0x19, 4	; 25
 300:	08 c0       	rjmp	.+16     	; 0x312 <keypad+0x114>
 302:	8f ed       	ldi	r24, 0xDF	; 223
 304:	9e e2       	ldi	r25, 0x2E	; 46
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <keypad+0x108>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <keypad+0x10e>
 30c:	00 00       	nop
		_delay_ms(3);
		return 'C';
 30e:	83 e4       	ldi	r24, 0x43	; 67
 310:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 312:	cd 99       	sbic	0x19, 5	; 25
 314:	08 c0       	rjmp	.+16     	; 0x326 <keypad+0x128>
 316:	8f ed       	ldi	r24, 0xDF	; 223
 318:	9e e2       	ldi	r25, 0x2E	; 46
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <keypad+0x11c>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <keypad+0x122>
 320:	00 00       	nop
		_delay_ms(3);
		return '0';
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 326:	ce 99       	sbic	0x19, 6	; 25
 328:	08 c0       	rjmp	.+16     	; 0x33a <keypad+0x13c>
 32a:	8f ed       	ldi	r24, 0xDF	; 223
 32c:	9e e2       	ldi	r25, 0x2E	; 46
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <keypad+0x130>
 332:	00 c0       	rjmp	.+0      	; 0x334 <keypad+0x136>
 334:	00 00       	nop
		_delay_ms(3);
		return '=';
 336:	8d e3       	ldi	r24, 0x3D	; 61
 338:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 33a:	cf 99       	sbic	0x19, 7	; 25
 33c:	08 c0       	rjmp	.+16     	; 0x34e <keypad+0x150>
 33e:	8f ed       	ldi	r24, 0xDF	; 223
 340:	9e e2       	ldi	r25, 0x2E	; 46
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <keypad+0x144>
 346:	00 c0       	rjmp	.+0      	; 0x348 <keypad+0x14a>
 348:	00 00       	nop
		_delay_ms(3);
		return '*';
 34a:	8a e2       	ldi	r24, 0x2A	; 42
 34c:	08 95       	ret
	}
}
 34e:	08 95       	ret

00000350 <keypad_func>:
 //int get_cn;//number of cans
 char can_no[10];
 

unsigned char keypad();
int keypad_func(){
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	2a 97       	sbiw	r28, 0x0a	; 10
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
	unsigned char x;
	char no[10];
	int i=0;
	int i1=0;
	DDRA =0x0F; // make PA0 to PA3 = output and PA4 to PA7 = Input
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
 372:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_init>
unsigned char keypad();
int keypad_func(){
	unsigned char x;
	char no[10];
	int i=0;
	int i1=0;
 376:	e1 2c       	mov	r14, r1
 378:	f1 2c       	mov	r15, r1

unsigned char keypad();
int keypad_func(){
	unsigned char x;
	char no[10];
	int i=0;
 37a:	c1 2c       	mov	r12, r1
 37c:	d1 2c       	mov	r13, r1
	int i1=0;
	DDRA =0x0F; // make PA0 to PA3 = output and PA4 to PA7 = Input
	lcd_init();
	while(1){
		PORTA=0xF0; // make all 4 column 1 and all rows 0
 37e:	80 ef       	ldi	r24, 0xF0	; 240
 380:	8b bb       	out	0x1b, r24	; 27
		if(PINA!= 0xF0){
 382:	89 b3       	in	r24, 0x19	; 25
 384:	80 3f       	cpi	r24, 0xF0	; 240
 386:	d9 f3       	breq	.-10     	; 0x37e <keypad_func+0x2e>
 388:	8f e1       	ldi	r24, 0x1F	; 31
 38a:	9e e4       	ldi	r25, 0x4E	; 78
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <keypad_func+0x3c>
 390:	00 c0       	rjmp	.+0      	; 0x392 <keypad_func+0x42>
 392:	00 00       	nop
			_delay_ms(5);
			x=keypad();
 394:	0e 94 ff 00 	call	0x1fe	; 0x1fe <keypad>
 398:	18 2f       	mov	r17, r24
			if (x=='*')
 39a:	8a 32       	cpi	r24, 0x2A	; 42
 39c:	09 f0       	breq	.+2      	; 0x3a0 <keypad_func+0x50>
 39e:	98 c0       	rjmp	.+304    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			{
				lcdcmd(0x01);//clear lcd
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcdcmd(0x80);//set the curser to first line
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcd_Print("1-Fast Charge");
 3b0:	85 ea       	ldi	r24, 0xA5	; 165
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
				lcdcmd(0xc0);//set the curser to second line
 3b8:	80 ec       	ldi	r24, 0xC0	; 192
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcd_Print("2-Ez Cash");
 3c0:	83 eb       	ldi	r24, 0xB3	; 179
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	21 ee       	ldi	r18, 0xE1	; 225
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	20 40       	sbci	r18, 0x00	; 0
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <keypad_func+0x7e>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <keypad_func+0x88>
 3d8:	00 00       	nop
				_delay_ms(100);
				lcdcmd(0x01);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcdcmd(0x80);//set the curser to first line
 3e2:	80 e8       	ldi	r24, 0x80	; 128
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcd_Print("3-Donate");
 3ea:	8d eb       	ldi	r24, 0xBD	; 189
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
				
				while(1){
					if(PINA!= 0xF0){
 3f2:	89 b3       	in	r24, 0x19	; 25
 3f4:	80 3f       	cpi	r24, 0xF0	; 240
 3f6:	e9 f3       	breq	.-6      	; 0x3f2 <keypad_func+0xa2>
						x=keypad();
 3f8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <keypad>
						//charge
						if(x=='1'){
 3fc:	81 33       	cpi	r24, 0x31	; 49
 3fe:	99 f4       	brne	.+38     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 400:	8f e1       	ldi	r24, 0x1F	; 31
 402:	9e e4       	ldi	r25, 0x4E	; 78
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
							_delay_ms(5);
							lcdcmd(0x80);//set the curser to first line
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							lcd_Print(" ");
 414:	83 ea       	ldi	r24, 0xA3	; 163
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
							lcdcmd(0x01);//clear lcd
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							break;
 424:	ac cf       	rjmp	.-168    	; 0x37e <keypad_func+0x2e>
						}
						//easy cash
						else if(x=='2'){
 426:	82 33       	cpi	r24, 0x32	; 50
 428:	21 f7       	brne	.-56     	; 0x3f2 <keypad_func+0xa2>
							get_pn=1;//get phone no
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <__data_end+0x1>
 432:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end>
 436:	8f e1       	ldi	r24, 0x1F	; 31
 438:	9e e4       	ldi	r25, 0x4E	; 78
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
							_delay_ms(5);
							lcdcmd(0x80);//set the curser to first line
 442:	80 e8       	ldi	r24, 0x80	; 128
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							lcd_Print(" ");
 44a:	83 ea       	ldi	r24, 0xA3	; 163
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
							lcdcmd(0x01);//clear lcd
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							lcd_Print("Enter the Phone");
 45a:	86 ec       	ldi	r24, 0xC6	; 198
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
							lcdcmd(0xc0);
 462:	80 ec       	ldi	r24, 0xC0	; 192
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							lcd_Print("Number");
 46a:	82 e7       	ldi	r24, 0x72	; 114
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
							lcdcmd(0x80);
 472:	80 e8       	ldi	r24, 0x80	; 128
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
 47a:	9f ef       	ldi	r25, 0xFF	; 255
 47c:	21 ee       	ldi	r18, 0xE1	; 225
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	91 50       	subi	r25, 0x01	; 1
 482:	20 40       	sbci	r18, 0x00	; 0
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
							_delay_ms(100);
							lcdcmd(0x01);
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							lcd_Print("Press = to");
 494:	86 ed       	ldi	r24, 0xD6	; 214
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
							lcdcmd(0xc0);
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							lcd_Print("Finish");
 4a4:	81 ee       	ldi	r24, 0xE1	; 225
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
							lcdcmd(0x80);
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	21 ee       	ldi	r18, 0xE1	; 225
 4b8:	84 e0       	ldi	r24, 0x04	; 4
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	20 40       	sbci	r18, 0x00	; 0
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c4:	00 00       	nop
							_delay_ms(100);
							lcdcmd(0x01);
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
							break;
 4ce:	57 cf       	rjmp	.-338    	; 0x37e <keypad_func+0x2e>

				}
				
				
			}
			else if (x=='=')
 4d0:	8d 33       	cpi	r24, 0x3D	; 61
 4d2:	e1 f0       	breq	.+56     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
				
			}
			else
			{
				
				lcddata(x);
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 6e 00 	call	0xdc	; 0xdc <lcddata>
				if(get_pn==1){
 4da:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__data_end>
 4de:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__data_end+0x1>
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	59 f4       	brne	.+22     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
					no[i]=x;
 4e6:	e1 e0       	ldi	r30, 0x01	; 1
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	ec 0f       	add	r30, r28
 4ec:	fd 1f       	adc	r31, r29
 4ee:	ec 0d       	add	r30, r12
 4f0:	fd 1d       	adc	r31, r13
 4f2:	10 83       	st	Z, r17
					i++;
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	c9 1a       	sub	r12, r25
 4f8:	d9 0a       	sbc	r13, r25
 4fa:	41 cf       	rjmp	.-382    	; 0x37e <keypad_func+0x2e>
				}
				else{
					can_no[i1]=x;
 4fc:	f7 01       	movw	r30, r14
 4fe:	e2 50       	subi	r30, 0x02	; 2
 500:	ff 4f       	sbci	r31, 0xFF	; 255
 502:	10 83       	st	Z, r17
					i1++;
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	e2 1a       	sub	r14, r18
 508:	f2 0a       	sbc	r15, r18
 50a:	39 cf       	rjmp	.-398    	; 0x37e <keypad_func+0x2e>
			}
			else if (x=='=')
			{
				
				
				get_pn=0;
 50c:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <__data_end+0x1>
 510:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <__data_end>
				lcdcmd(0x01);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcd_Print("Entered phone NO.:");
 51c:	88 ee       	ldi	r24, 0xE8	; 232
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
				lcdcmd(0xc0);
 524:	80 ec       	ldi	r24, 0xC0	; 192
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				lcd_Print(&no);//print the no
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
				lcdcmd(0x80);
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				//lcd_Print(&can_no);//print the no
				int phone_no= atoi(no);//phone nimber in int
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	0e 94 c0 03 	call	0x780	; 0x780 <atoi>
 544:	9f ef       	ldi	r25, 0xFF	; 255
 546:	21 ee       	ldi	r18, 0xE1	; 225
 548:	84 e0       	ldi	r24, 0x04	; 4
 54a:	91 50       	subi	r25, 0x01	; 1
 54c:	20 40       	sbci	r18, 0x00	; 0
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 554:	00 00       	nop
				_delay_ms(100);
				lcdcmd(0x01);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
 55e:	9f ef       	ldi	r25, 0xFF	; 255
 560:	21 ee       	ldi	r18, 0xE1	; 225
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	91 50       	subi	r25, 0x01	; 1
 566:	20 40       	sbci	r18, 0x00	; 0
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	e1 f7       	brne	.-8      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 56e:	00 00       	nop
			
				_delay_ms(100);
				lcdcmd(0x01);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				
			}
		}
	}
	
}
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	2a 96       	adiw	r28, 0x0a	; 10
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	ff 90       	pop	r15
 590:	ef 90       	pop	r14
 592:	df 90       	pop	r13
 594:	cf 90       	pop	r12
 596:	08 95       	ret

00000598 <Stepper_motor>:


	
	//Set a1, a2, a3, a4 as output

	DDRD |= a1 | a2 | a3| a4;
 598:	81 b3       	in	r24, 0x11	; 17
 59a:	80 6f       	ori	r24, 0xF0	; 240
 59c:	81 bb       	out	0x11, r24	; 17

	//Set input & pull-up resistor

	DDRD &= ~SW;
 59e:	81 b3       	in	r24, 0x11	; 17
 5a0:	87 7f       	andi	r24, 0xF7	; 247
 5a2:	81 bb       	out	0x11, r24	; 17

	PORTD |= SW;
 5a4:	82 b3       	in	r24, 0x12	; 18
 5a6:	88 60       	ori	r24, 0x08	; 8
 5a8:	82 bb       	out	0x12, r24	; 18
	
	DDRD &= ~SW2;
 5aa:	81 b3       	in	r24, 0x11	; 17
 5ac:	8b 7f       	andi	r24, 0xFB	; 251
 5ae:	81 bb       	out	0x11, r24	; 17

	PORTD |= SW2;
 5b0:	82 b3       	in	r24, 0x12	; 18
 5b2:	84 60       	ori	r24, 0x04	; 4
 5b4:	82 bb       	out	0x12, r24	; 18
	
	while(1){
		
		if((PIND & SW) && (PIND & SW2)){
 5b6:	83 9b       	sbis	0x10, 3	; 16
 5b8:	fe cf       	rjmp	.-4      	; 0x5b6 <Stepper_motor+0x1e>
 5ba:	82 9b       	sbis	0x10, 2	; 16
 5bc:	fc cf       	rjmp	.-8      	; 0x5b6 <Stepper_motor+0x1e>

			while(1){
				
				if((!(PIND & SW2))){
 5be:	82 99       	sbic	0x10, 2	; 16
 5c0:	66 c0       	rjmp	.+204    	; 0x68e <Stepper_motor+0xf6>
					while(1){
						if((!(PIND & SW))){
 5c2:	83 99       	sbic	0x10, 3	; 16
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <Stepper_motor+0x2a>
							PORTD |= a1;
 5c6:	82 b3       	in	r24, 0x12	; 18
 5c8:	80 61       	ori	r24, 0x10	; 16
 5ca:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 5cc:	82 b3       	in	r24, 0x12	; 18
 5ce:	8f 7d       	andi	r24, 0xDF	; 223
 5d0:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a3;
 5d2:	82 b3       	in	r24, 0x12	; 18
 5d4:	8f 7b       	andi	r24, 0xBF	; 191
 5d6:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a4;
 5d8:	82 b3       	in	r24, 0x12	; 18
 5da:	8f 77       	andi	r24, 0x7F	; 127
 5dc:	82 bb       	out	0x12, r24	; 18
 5de:	2f ef       	ldi	r18, 0xFF	; 255
 5e0:	89 ef       	ldi	r24, 0xF9	; 249
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	21 50       	subi	r18, 0x01	; 1
 5e6:	80 40       	sbci	r24, 0x00	; 0
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <Stepper_motor+0x4c>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <Stepper_motor+0x56>
 5ee:	00 00       	nop

							_delay_ms(20);



							PORTD |= a1;
 5f0:	82 b3       	in	r24, 0x12	; 18
 5f2:	80 61       	ori	r24, 0x10	; 16
 5f4:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 5f6:	82 b3       	in	r24, 0x12	; 18
 5f8:	8f 7d       	andi	r24, 0xDF	; 223
 5fa:	82 bb       	out	0x12, r24	; 18

							PORTD  &= ~ a3;
 5fc:	82 b3       	in	r24, 0x12	; 18
 5fe:	8f 7b       	andi	r24, 0xBF	; 191
 600:	82 bb       	out	0x12, r24	; 18

							PORTD |= a4;
 602:	82 b3       	in	r24, 0x12	; 18
 604:	80 68       	ori	r24, 0x80	; 128
 606:	82 bb       	out	0x12, r24	; 18
 608:	8f e7       	ldi	r24, 0x7F	; 127
 60a:	9e e3       	ldi	r25, 0x3E	; 62
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	f1 f7       	brne	.-4      	; 0x60c <Stepper_motor+0x74>
 610:	00 c0       	rjmp	.+0      	; 0x612 <Stepper_motor+0x7a>
 612:	00 00       	nop
							_delay_ms(4);
							
							

							
							PORTD &= ~a1;
 614:	82 b3       	in	r24, 0x12	; 18
 616:	8f 7e       	andi	r24, 0xEF	; 239
 618:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 61a:	82 b3       	in	r24, 0x12	; 18
 61c:	8f 7d       	andi	r24, 0xDF	; 223
 61e:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a3;
 620:	82 b3       	in	r24, 0x12	; 18
 622:	8f 7b       	andi	r24, 0xBF	; 191
 624:	82 bb       	out	0x12, r24	; 18

							PORTD |= a4;
 626:	82 b3       	in	r24, 0x12	; 18
 628:	80 68       	ori	r24, 0x80	; 128
 62a:	82 bb       	out	0x12, r24	; 18
 62c:	9f ef       	ldi	r25, 0xFF	; 255
 62e:	29 ef       	ldi	r18, 0xF9	; 249
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	91 50       	subi	r25, 0x01	; 1
 634:	20 40       	sbci	r18, 0x00	; 0
 636:	80 40       	sbci	r24, 0x00	; 0
 638:	e1 f7       	brne	.-8      	; 0x632 <Stepper_motor+0x9a>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <Stepper_motor+0xa4>
 63c:	00 00       	nop

							_delay_ms(20);
							
							
							PORTD |= a1;
 63e:	82 b3       	in	r24, 0x12	; 18
 640:	80 61       	ori	r24, 0x10	; 16
 642:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 644:	82 b3       	in	r24, 0x12	; 18
 646:	8f 7d       	andi	r24, 0xDF	; 223
 648:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~ a3;
 64a:	82 b3       	in	r24, 0x12	; 18
 64c:	8f 7b       	andi	r24, 0xBF	; 191
 64e:	82 bb       	out	0x12, r24	; 18

							PORTD |= a4;
 650:	82 b3       	in	r24, 0x12	; 18
 652:	80 68       	ori	r24, 0x80	; 128
 654:	82 bb       	out	0x12, r24	; 18
 656:	8f e7       	ldi	r24, 0x7F	; 127
 658:	9e e3       	ldi	r25, 0x3E	; 62
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <Stepper_motor+0xc2>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <Stepper_motor+0xc8>
 660:	00 00       	nop

							_delay_ms(4);
							
							
							
							PORTD |= a1;
 662:	82 b3       	in	r24, 0x12	; 18
 664:	80 61       	ori	r24, 0x10	; 16
 666:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a2;
 668:	82 b3       	in	r24, 0x12	; 18
 66a:	8f 7d       	andi	r24, 0xDF	; 223
 66c:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a3;
 66e:	82 b3       	in	r24, 0x12	; 18
 670:	8f 7b       	andi	r24, 0xBF	; 191
 672:	82 bb       	out	0x12, r24	; 18

							PORTD &= ~a4;
 674:	82 b3       	in	r24, 0x12	; 18
 676:	8f 77       	andi	r24, 0x7F	; 127
 678:	82 bb       	out	0x12, r24	; 18
 67a:	9f ef       	ldi	r25, 0xFF	; 255
 67c:	29 ef       	ldi	r18, 0xF9	; 249
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	91 50       	subi	r25, 0x01	; 1
 682:	20 40       	sbci	r18, 0x00	; 0
 684:	80 40       	sbci	r24, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <Stepper_motor+0xe8>
 688:	00 c0       	rjmp	.+0      	; 0x68a <Stepper_motor+0xf2>
 68a:	00 00       	nop

							_delay_ms(20);
							return 0;
 68c:	65 c0       	rjmp	.+202    	; 0x758 <Stepper_motor+0x1c0>
					

				}
				

				else if(!(PIND & SW)){
 68e:	83 99       	sbic	0x10, 3	; 16
 690:	96 cf       	rjmp	.-212    	; 0x5be <Stepper_motor+0x26>
					

					


					PORTD |= a1;
 692:	82 b3       	in	r24, 0x12	; 18
 694:	80 61       	ori	r24, 0x10	; 16
 696:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 698:	82 b3       	in	r24, 0x12	; 18
 69a:	8f 7d       	andi	r24, 0xDF	; 223
 69c:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a3;
 69e:	82 b3       	in	r24, 0x12	; 18
 6a0:	8f 7b       	andi	r24, 0xBF	; 191
 6a2:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 6a4:	82 b3       	in	r24, 0x12	; 18
 6a6:	8f 77       	andi	r24, 0x7F	; 127
 6a8:	82 bb       	out	0x12, r24	; 18
 6aa:	9f ef       	ldi	r25, 0xFF	; 255
 6ac:	29 ef       	ldi	r18, 0xF9	; 249
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	91 50       	subi	r25, 0x01	; 1
 6b2:	20 40       	sbci	r18, 0x00	; 0
 6b4:	80 40       	sbci	r24, 0x00	; 0
 6b6:	e1 f7       	brne	.-8      	; 0x6b0 <Stepper_motor+0x118>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <Stepper_motor+0x122>
 6ba:	00 00       	nop

					_delay_ms(20);



					PORTD |= a1;
 6bc:	82 b3       	in	r24, 0x12	; 18
 6be:	80 61       	ori	r24, 0x10	; 16
 6c0:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 6c2:	82 b3       	in	r24, 0x12	; 18
 6c4:	8f 7d       	andi	r24, 0xDF	; 223
 6c6:	82 bb       	out	0x12, r24	; 18

					PORTD |= a3;
 6c8:	82 b3       	in	r24, 0x12	; 18
 6ca:	80 64       	ori	r24, 0x40	; 64
 6cc:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 6ce:	82 b3       	in	r24, 0x12	; 18
 6d0:	8f 77       	andi	r24, 0x7F	; 127
 6d2:	82 bb       	out	0x12, r24	; 18
 6d4:	8f e7       	ldi	r24, 0x7F	; 127
 6d6:	9e e3       	ldi	r25, 0x3E	; 62
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <Stepper_motor+0x140>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <Stepper_motor+0x146>
 6de:	00 00       	nop
					_delay_ms(4);
					
					

					
					PORTD &= ~a1;
 6e0:	82 b3       	in	r24, 0x12	; 18
 6e2:	8f 7e       	andi	r24, 0xEF	; 239
 6e4:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 6e6:	82 b3       	in	r24, 0x12	; 18
 6e8:	8f 7d       	andi	r24, 0xDF	; 223
 6ea:	82 bb       	out	0x12, r24	; 18

					PORTD |= a3;
 6ec:	82 b3       	in	r24, 0x12	; 18
 6ee:	80 64       	ori	r24, 0x40	; 64
 6f0:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 6f2:	82 b3       	in	r24, 0x12	; 18
 6f4:	8f 77       	andi	r24, 0x7F	; 127
 6f6:	82 bb       	out	0x12, r24	; 18
 6f8:	9f ef       	ldi	r25, 0xFF	; 255
 6fa:	29 ef       	ldi	r18, 0xF9	; 249
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	91 50       	subi	r25, 0x01	; 1
 700:	20 40       	sbci	r18, 0x00	; 0
 702:	80 40       	sbci	r24, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <Stepper_motor+0x166>
 706:	00 c0       	rjmp	.+0      	; 0x708 <Stepper_motor+0x170>
 708:	00 00       	nop

					_delay_ms(20);
					
					
					PORTD |= a1;
 70a:	82 b3       	in	r24, 0x12	; 18
 70c:	80 61       	ori	r24, 0x10	; 16
 70e:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 710:	82 b3       	in	r24, 0x12	; 18
 712:	8f 7d       	andi	r24, 0xDF	; 223
 714:	82 bb       	out	0x12, r24	; 18

					PORTD |= a3;
 716:	82 b3       	in	r24, 0x12	; 18
 718:	80 64       	ori	r24, 0x40	; 64
 71a:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 71c:	82 b3       	in	r24, 0x12	; 18
 71e:	8f 77       	andi	r24, 0x7F	; 127
 720:	82 bb       	out	0x12, r24	; 18
 722:	8f e7       	ldi	r24, 0x7F	; 127
 724:	9e e3       	ldi	r25, 0x3E	; 62
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <Stepper_motor+0x18e>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <Stepper_motor+0x194>
 72c:	00 00       	nop

					_delay_ms(4);
					
					
					
					PORTD |= a1;
 72e:	82 b3       	in	r24, 0x12	; 18
 730:	80 61       	ori	r24, 0x10	; 16
 732:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a2;
 734:	82 b3       	in	r24, 0x12	; 18
 736:	8f 7d       	andi	r24, 0xDF	; 223
 738:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a3;
 73a:	82 b3       	in	r24, 0x12	; 18
 73c:	8f 7b       	andi	r24, 0xBF	; 191
 73e:	82 bb       	out	0x12, r24	; 18

					PORTD &= ~a4;
 740:	82 b3       	in	r24, 0x12	; 18
 742:	8f 77       	andi	r24, 0x7F	; 127
 744:	82 bb       	out	0x12, r24	; 18
 746:	9f ef       	ldi	r25, 0xFF	; 255
 748:	29 ef       	ldi	r18, 0xF9	; 249
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	20 40       	sbci	r18, 0x00	; 0
 750:	80 40       	sbci	r24, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <Stepper_motor+0x1b4>
 754:	00 c0       	rjmp	.+0      	; 0x756 <Stepper_motor+0x1be>
 756:	00 00       	nop
	}

	
	
	
}
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	08 95       	ret

0000075e <main>:
int main(void){
    while(1){
		keypad_func();
 75e:	0e 94 a8 01 	call	0x350	; 0x350 <keypad_func>
		int can_number= atoi(can_no);
 762:	8e ef       	ldi	r24, 0xFE	; 254
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 c0 03 	call	0x780	; 0x780 <atoi>
 76a:	8c 01       	movw	r16, r24
		for(int k=0;k<can_number;k++){
 76c:	c0 e0       	ldi	r28, 0x00	; 0
 76e:	d0 e0       	ldi	r29, 0x00	; 0
 770:	03 c0       	rjmp	.+6      	; 0x778 <main+0x1a>
			Stepper_motor();
 772:	0e 94 cc 02 	call	0x598	; 0x598 <Stepper_motor>
}
int main(void){
    while(1){
		keypad_func();
		int can_number= atoi(can_no);
		for(int k=0;k<can_number;k++){
 776:	21 96       	adiw	r28, 0x01	; 1
 778:	c0 17       	cp	r28, r16
 77a:	d1 07       	cpc	r29, r17
 77c:	d4 f3       	brlt	.-12     	; 0x772 <main+0x14>
 77e:	ef cf       	rjmp	.-34     	; 0x75e <main>

00000780 <atoi>:
 780:	fc 01       	movw	r30, r24
 782:	88 27       	eor	r24, r24
 784:	99 27       	eor	r25, r25
 786:	e8 94       	clt
 788:	21 91       	ld	r18, Z+
 78a:	20 32       	cpi	r18, 0x20	; 32
 78c:	e9 f3       	breq	.-6      	; 0x788 <atoi+0x8>
 78e:	29 30       	cpi	r18, 0x09	; 9
 790:	10 f0       	brcs	.+4      	; 0x796 <atoi+0x16>
 792:	2e 30       	cpi	r18, 0x0E	; 14
 794:	c8 f3       	brcs	.-14     	; 0x788 <atoi+0x8>
 796:	2b 32       	cpi	r18, 0x2B	; 43
 798:	41 f0       	breq	.+16     	; 0x7aa <atoi+0x2a>
 79a:	2d 32       	cpi	r18, 0x2D	; 45
 79c:	39 f4       	brne	.+14     	; 0x7ac <atoi+0x2c>
 79e:	68 94       	set
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <atoi+0x2a>
 7a2:	0e 94 de 03 	call	0x7bc	; 0x7bc <__mulhi_const_10>
 7a6:	82 0f       	add	r24, r18
 7a8:	91 1d       	adc	r25, r1
 7aa:	21 91       	ld	r18, Z+
 7ac:	20 53       	subi	r18, 0x30	; 48
 7ae:	2a 30       	cpi	r18, 0x0A	; 10
 7b0:	c0 f3       	brcs	.-16     	; 0x7a2 <atoi+0x22>
 7b2:	1e f4       	brtc	.+6      	; 0x7ba <atoi+0x3a>
 7b4:	90 95       	com	r25
 7b6:	81 95       	neg	r24
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	08 95       	ret

000007bc <__mulhi_const_10>:
 7bc:	7a e0       	ldi	r23, 0x0A	; 10
 7be:	97 9f       	mul	r25, r23
 7c0:	90 2d       	mov	r25, r0
 7c2:	87 9f       	mul	r24, r23
 7c4:	80 2d       	mov	r24, r0
 7c6:	91 0d       	add	r25, r1
 7c8:	11 24       	eor	r1, r1
 7ca:	08 95       	ret

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
