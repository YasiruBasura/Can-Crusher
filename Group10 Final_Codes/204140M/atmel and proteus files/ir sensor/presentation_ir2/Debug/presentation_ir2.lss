
presentation_ir2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000021e  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bd  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064c  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d7  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  8a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdcmd>:

int check_discard_bin=0;

void lcdcmd(unsigned char cmd){
	
	PORTB &=~(1<<RS); //RS=0 for command (1111 1110)
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9e 7f       	andi	r25, 0xFE	; 254
  96:	98 bb       	out	0x18, r25	; 24
	PORTB &=~(1<<RW); //RW=0 for write (1111 1101)
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	98 bb       	out	0x18, r25	; 24
	LCD= cmd & 0xF0;  //Send upper nibble
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	95 bb       	out	0x15, r25	; 21
	PORTD|=(1<<EN); //EN=1 for H to L pulse
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	91 60       	ori	r25, 0x01	; 1
  a8:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e9       	ldi	r30, 0x9F	; 159
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcmd+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcdcmd+0x22>
  b4:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN); // EN=0 for H to L pulse
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	9e 7f       	andi	r25, 0xFE	; 254
  ba:	92 bb       	out	0x12, r25	; 18

	LCD = cmd<<4; // send low nibble;
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	85 bb       	out	0x15, r24	; 21
	PORTD |=(1<<EN); //EN=0for H to L pulse
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	8f e9       	ldi	r24, 0x9F	; 159
  ca:	9f e0       	ldi	r25, 0x0F	; 15
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdcmd+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdcmd+0x40>
  d2:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <lcddata>:
	}
}


void lcddata(unsigned char data){
	PORTB |= (1<<RS); //RS=1 for data
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	91 60       	ori	r25, 0x01	; 1
  e0:	98 bb       	out	0x18, r25	; 24
	PORTB &= ~(1<<RW); //RW=0 for write
  e2:	98 b3       	in	r25, 0x18	; 24
  e4:	9d 7f       	andi	r25, 0xFD	; 253
  e6:	98 bb       	out	0x18, r25	; 24
	LCD= data & 0xF0;  //Send upper nibble
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	95 bb       	out	0x15, r25	; 21
	PORTD|= (1<<EN); //EN=1 for H to L pulse
  ee:	92 b3       	in	r25, 0x12	; 18
  f0:	91 60       	ori	r25, 0x01	; 1
  f2:	92 bb       	out	0x12, r25	; 18
  f4:	ef e1       	ldi	r30, 0x1F	; 31
  f6:	fe e4       	ldi	r31, 0x4E	; 78
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcddata+0x1c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcddata+0x22>
  fe:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~(1<<EN); // EN=0 for H to L pulse
 100:	92 b3       	in	r25, 0x12	; 18
 102:	9e 7f       	andi	r25, 0xFE	; 254
 104:	92 bb       	out	0x12, r25	; 18

	LCD = data<<4; // send low nibble;
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	85 bb       	out	0x15, r24	; 21
	PORTD |=(1<<EN); //EN=1 for H to L pulse
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	82 bb       	out	0x12, r24	; 18
 112:	8f e1       	ldi	r24, 0x1F	; 31
 114:	9e e4       	ldi	r25, 0x4E	; 78
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcddata+0x3a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcddata+0x40>
 11c:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~(1<<EN);
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	82 bb       	out	0x12, r24	; 18
 124:	08 95       	ret

00000126 <lcd_Print>:
	PORTD |=(1<<EN); //EN=0for H to L pulse
	_delay_ms(1);
	PORTD &= ~(1<<EN);
}

void lcd_Print (char*str){
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	04 c0       	rjmp	.+8      	; 0x13e <lcd_Print+0x18>
	{
		lcddata(str[i]);
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 6e 00 	call	0xdc	; 0xdc <lcddata>
	PORTD &= ~(1<<EN);
}

void lcd_Print (char*str){
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	f8 01       	movw	r30, r16
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	80 81       	ld	r24, Z
 146:	81 11       	cpse	r24, r1
 148:	f6 cf       	rjmp	.-20     	; 0x136 <lcd_Print+0x10>
	{
		lcddata(str[i]);
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <lcd_init>:
	PORTD &= ~(1<<EN);
	
}

void lcd_init(){
	DDRC= 0xF0; // Define  output LCD port
 154:	80 ef       	ldi	r24, 0xF0	; 240
 156:	84 bb       	out	0x14, r24	; 20
	DDRD |=(1<<EN); //Define EN pin  as output
 158:	81 b3       	in	r24, 0x11	; 17
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF; // define RS and  RW pin as output
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
	PORTD&= ~(1<<EN); //initialize EN=0
 162:	82 b3       	in	r24, 0x12	; 18
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x33);
 168:	83 e3       	ldi	r24, 0x33	; 51
 16a:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x32);
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x28); // LCD in 4 bit mode
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0x0E); //display on cursor on
 17a:	8e e0       	ldi	r24, 0x0E	; 14
 17c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	/*lcddata(72);
	lcddata(69);
	lcddata(76);
	lcddata(76);
	lcddata(79);*/
	lcd_Print("WELCOME");
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	83 ef       	ldi	r24, 0xF3	; 243
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <lcd_init+0x3a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x44>
 198:	00 00       	nop
	_delay_ms(40);
	lcdcmd(0x01); //clear LCD
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9f e1       	ldi	r25, 0x1F	; 31
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_init+0x50>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_init+0x56>
 1aa:	00 00       	nop
	_delay_ms(2);
	//checking whether discard bin is empty or not
	lcdcmd(0x80);//set the curser to first line
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
	lcdcmd(0xc0);//set the curser to second line
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
 1b8:	08 95       	ret

000001ba <main>:

}

int main(void)
{ 
	lcd_init();
 1ba:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_init>
	while(1){
			while(1){
				if(PINC & 0x01==0x01){
 1be:	98 9b       	sbis	0x13, 0	; 19
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <main+0x4>
					lcdcmd(0x80);//set the curser to first line
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
					lcd_Print("Discard bin is");
 1c8:	88 e6       	ldi	r24, 0x68	; 104
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
					lcdcmd(0xc0);//set the curser to second line
 1d0:	80 ec       	ldi	r24, 0xC0	; 192
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
					lcd_Print("full");
 1d6:	87 e7       	ldi	r24, 0x77	; 119
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
					lcdcmd(0x80);//set the curser to first line
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	81 ee       	ldi	r24, 0xE1	; 225
 1e8:	94 e0       	ldi	r25, 0x04	; 4
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x30>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x3a>
 1f4:	00 00       	nop
					_delay_ms(100);
					lcdcmd(0x01); //clear LCD
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
					lcd_Print("Clear the discard");
 1fc:	8c e7       	ldi	r24, 0x7C	; 124
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
					lcdcmd(0xc0);//set the curser to second line
 204:	80 ec       	ldi	r24, 0xC0	; 192
 206:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
					lcd_Print("bin");
 20a:	8e e8       	ldi	r24, 0x8E	; 142
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_Print>
					lcdcmd(0x80);//set the curser to first line
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	0e 94 49 00 	call	0x92	; 0x92 <lcdcmd>
				}
				else{
					break;
				}
				
			};
 218:	d2 cf       	rjmp	.-92     	; 0x1be <main+0x4>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
