
SPI_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000630  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000595  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000152  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init>:
char SPI_Read()								/* SPI read data function */
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
	return(SPDR);							/* return received data */
}
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
  72:	be 98       	cbi	0x17, 6	; 23
  74:	c4 9a       	sbi	0x18, 4	; 24
  76:	81 e5       	ldi	r24, 0x51	; 81
  78:	8d b9       	out	0x0d, r24	; 13
  7a:	70 98       	cbi	0x0e, 0	; 14
  7c:	08 95       	ret

0000007e <SPI_Write>:
  7e:	8f b9       	out	0x0f, r24	; 15
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <SPI_Write+0x2>
  84:	8f b1       	in	r24, 0x0f	; 15
  86:	08 95       	ret

00000088 <main>:
#include <string.h>
//#include "LCD_16x2_H_file.h"			/* Include LCD header file */
#include "SPI_Master.c"			/* Include SPI master header file */

int main(void)
{
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0xe>
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x10>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	unsigned char count[4]="kin";
  9c:	8b e6       	ldi	r24, 0x6B	; 107
  9e:	99 e6       	ldi	r25, 0x69	; 105
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	8e e6       	ldi	r24, 0x6E	; 110
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	9c 83       	std	Y+4, r25	; 0x04
  aa:	8b 83       	std	Y+3, r24	; 0x03
	//char buffer[5];
	
	//LCD_Init();
	
	SPI_Init();	
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init>
	SS_Enable;
  b0:	c4 98       	cbi	0x18, 4	; 24
  b2:	8e 01       	movw	r16, r28
  b4:	0f 5f       	subi	r16, 0xFF	; 255
  b6:	1f 4f       	sbci	r17, 0xFF	; 255
  b8:	7e 01       	movw	r14, r28
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	e8 0e       	add	r14, r24
  be:	f1 1c       	adc	r15, r1
	
	for(int i=0;i<4;i++)
	{
		SPI_Write(count[i]);
  c0:	f8 01       	movw	r30, r16
  c2:	81 91       	ld	r24, Z+
  c4:	8f 01       	movw	r16, r30
  c6:	0e 94 3f 00 	call	0x7e	; 0x7e <SPI_Write>
	//LCD_Init();
	
	SPI_Init();	
	SS_Enable;
	
	for(int i=0;i<4;i++)
  ca:	0e 15       	cp	r16, r14
  cc:	1f 05       	cpc	r17, r15
  ce:	c1 f7       	brne	.-16     	; 0xc0 <main+0x38>
		LCD_String_xy(2, 13, buffer);
		count++;
		_delay_ms(500);
	}*/
		
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
  e6:	ef 90       	pop	r14
  e8:	08 95       	ret

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
