
SPI_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000701  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  000008f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b7  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init>:
char SPI_Transmit(char data)					/* SPI transmit data function */
{
	SPDR = data;								/* Write data to SPI data register */
	while(!(SPSR & (1<<SPIF)));					/* Wait till transmission complete */
	return(SPDR);								/* return received data */
}
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 74       	andi	r24, 0x4F	; 79
  70:	87 bb       	out	0x17, r24	; 23
  72:	be 9a       	sbi	0x17, 6	; 23
  74:	80 e4       	ldi	r24, 0x40	; 64
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <SPI_Receive>:

char SPI_Receive()								/* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));					/* Wait till reception complete */
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <SPI_Receive>
	return(SPDR);								/* return received data */
  7e:	8f b1       	in	r24, 0x0f	; 15
}
  80:	08 95       	ret

00000082 <main>:
//#include "LCD_16x2_H_file.h"			/* Include LCD header file */
#include "SPI_Slave.c"			/* Include SPI slave header file */


int main(void)
{
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
	unsigned char a;
	//char buffer[5];
	
	DDRA=0xff;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a bb       	out	0x1a, r24	; 26
	
	
	//LCD_Init();
	SPI_Init();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init>
  94:	c4 e0       	ldi	r28, 0x04	; 4
  96:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA=0b00000100;
			_delay_ms(10);
		}
		else if(a=='g')
		{
			PORTA=0b00001000;
  98:	68 94       	set
  9a:	ff 24       	eor	r15, r15
  9c:	f3 f8       	bld	r15, 3
			PORTA=0b00000010;
			_delay_ms(10);
		}
		else if(a=='n')
		{
			PORTA=0b00000100;
  9e:	14 e0       	ldi	r17, 0x04	; 4
		{
			PORTA=0b00000100;
		}
		else if(a=='i')
		{
			PORTA=0b00000010;
  a0:	02 e0       	ldi	r16, 0x02	; 2
	//LCD_Init();
	SPI_Init();
	
	for(int i=0;i<4;i++)
	{
		a = SPI_Receive();
  a2:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_Receive>
		
		if(a=='k')
  a6:	8b 36       	cpi	r24, 0x6B	; 107
  a8:	11 f4       	brne	.+4      	; 0xae <main+0x2c>
		{
			PORTA=0b00000100;
  aa:	1b bb       	out	0x1b, r17	; 27
  ac:	1d c0       	rjmp	.+58     	; 0xe8 <main+0x66>
		}
		else if(a=='i')
  ae:	89 36       	cpi	r24, 0x69	; 105
  b0:	41 f4       	brne	.+16     	; 0xc2 <main+0x40>
		{
			PORTA=0b00000010;
  b2:	0b bb       	out	0x1b, r16	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x36>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3c>
  be:	00 00       	nop
  c0:	13 c0       	rjmp	.+38     	; 0xe8 <main+0x66>
			_delay_ms(10);
		}
		else if(a=='n')
  c2:	8e 36       	cpi	r24, 0x6E	; 110
  c4:	41 f4       	brne	.+16     	; 0xd6 <main+0x54>
		{
			PORTA=0b00000100;
  c6:	1b bb       	out	0x1b, r17	; 27
  c8:	8f e1       	ldi	r24, 0x1F	; 31
  ca:	9e e4       	ldi	r25, 0x4E	; 78
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x50>
  d2:	00 00       	nop
  d4:	09 c0       	rjmp	.+18     	; 0xe8 <main+0x66>
			_delay_ms(10);
		}
		else if(a=='g')
  d6:	87 36       	cpi	r24, 0x67	; 103
  d8:	39 f4       	brne	.+14     	; 0xe8 <main+0x66>
		{
			PORTA=0b00001000;
  da:	fb ba       	out	0x1b, r15	; 27
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x5e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x64>
  e6:	00 00       	nop
  e8:	21 97       	sbiw	r28, 0x01	; 1
	
	
	//LCD_Init();
	SPI_Init();
	
	for(int i=0;i<4;i++)
  ea:	d9 f6       	brne	.-74     	; 0xa2 <main+0x20>
		
		sprintf(buffer, "%d   ", count);
		LCD_String_xy(2, 13, buffer);
	}*/

  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
