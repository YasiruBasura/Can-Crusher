
SPI_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800126  00800126  000009f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b4  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094e  00000000  00000000  00002af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00003448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e8  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ed0  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 32       	cpi	r26, 0x26	; 38
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e2       	ldi	r26, 0x26	; 38
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 33       	cpi	r26, 0x38	; 56
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 03 	call	0x75e	; 0x75e <main>
  8a:	0c 94 4b 04 	jmp	0x896	; 0x896 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Init>:
#include "SPI_Master.h"				/* Include SPI Master header file */


void SPI_Init()								/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);		/* Make MOSI, SCK, 0th pin direction as output pins */
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6b       	ori	r24, 0xB0	; 176
  96:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);						/* Make MISO pin as input pin */
  98:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<SS);						/* Disable slave initially by making high on SS pin */
  9a:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI, Enable in master mode, with Fosc/16 SCK frequency */
  9c:	81 e5       	ldi	r24, 0x51	; 81
  9e:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
  a0:	70 98       	cbi	0x0e, 0	; 14
  a2:	08 95       	ret

000000a4 <SPI_Write>:
}

void SPI_Write(char data)					/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;							/* Write data to SPI data register */
  a4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
  a6:	77 9b       	sbis	0x0e, 7	; 14
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <SPI_Write+0x2>
	flush_buffer = SPDR;					/* Flush received data */
  aa:	8f b1       	in	r24, 0x0f	; 15
  ac:	08 95       	ret

000000ae <SPI_Read>:
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}

char SPI_Read()								/* SPI read data function */
{
	SPDR = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
  b2:	77 9b       	sbis	0x0e, 7	; 14
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <SPI_Read+0x4>
	return(SPDR);							/* return received data */
  b6:	8f b1       	in	r24, 0x0f	; 15
}
  b8:	08 95       	ret

000000ba <lcdcmd>:
		}
	}
	
}
void lcdcmd(unsigned char cmd){
	PORTB &=~(1<<RS); //RS=0 for command (1111 1110)
  ba:	c0 98       	cbi	0x18, 0	; 24
	PORTB &=~(1<<RW); //RW=0 for write (1111 1101)
  bc:	c1 98       	cbi	0x18, 1	; 24
	LCD= cmd & 0xF0;  //Send upper nibble
  be:	98 2f       	mov	r25, r24
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	95 bb       	out	0x15, r25	; 21
	PORTD|=(1<<EN); //EN=1 for H to L pulse
  c4:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	ef e9       	ldi	r30, 0x9F	; 159
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcdcmd+0x10>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcdcmd+0x16>
  d0:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN); // EN=0 for H to L pulse
  d2:	90 98       	cbi	0x12, 0	; 18

	LCD = cmd<<4; // send low nibble;
  d4:	82 95       	swap	r24
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	85 bb       	out	0x15, r24	; 21
	PORTD |=(1<<EN); //EN=0for H to L pulse
  da:	90 9a       	sbi	0x12, 0	; 18
  dc:	8f e9       	ldi	r24, 0x9F	; 159
  de:	9f e0       	ldi	r25, 0x0F	; 15
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcdcmd+0x26>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcdcmd+0x2c>
  e6:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1<<EN);
  e8:	90 98       	cbi	0x12, 0	; 18
  ea:	08 95       	ret

000000ec <lcddata>:
		lcddata(str[i]);
	}
}

void lcddata(unsigned char data){
	PORTB |= (1<<RS); //RS=1 for data
  ec:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1<<RW); //RW=0 for write
  ee:	c1 98       	cbi	0x18, 1	; 24
	LCD= data & 0xF0;  //Send upper nibble
  f0:	98 2f       	mov	r25, r24
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	95 bb       	out	0x15, r25	; 21
	PORTD|= (1<<EN); //EN=1 for H to L pulse
  f6:	90 9a       	sbi	0x12, 0	; 18
  f8:	ef e3       	ldi	r30, 0x3F	; 63
  fa:	ff e1       	ldi	r31, 0x1F	; 31
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcddata+0x10>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcddata+0x16>
 102:	00 00       	nop
	_delay_ms(2);
	PORTD &= ~(1<<EN); // EN=0 for H to L pulse
 104:	90 98       	cbi	0x12, 0	; 18

	LCD = data<<4; // send low nibble;
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	85 bb       	out	0x15, r24	; 21
	PORTD |=(1<<EN); //EN=1 for H to L pulse
 10c:	90 9a       	sbi	0x12, 0	; 18
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcddata+0x26>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcddata+0x2c>
 118:	00 00       	nop
	_delay_ms(2);
	PORTD &= ~(1<<EN);
 11a:	90 98       	cbi	0x12, 0	; 18
 11c:	08 95       	ret

0000011e <lcd_Print>:
	PORTD |=(1<<EN); //EN=0for H to L pulse
	_delay_ms(1);
	PORTD &= ~(1<<EN);
}

void lcd_Print (char*str){
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	39 f0       	breq	.+14     	; 0x138 <lcd_Print+0x1a>
 12a:	21 96       	adiw	r28, 0x01	; 1
	{
		lcddata(str[i]);
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 76 00 	call	0xec	; 0xec <lcddata>
	PORTD &= ~(1<<EN);
}

void lcd_Print (char*str){
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fa cf       	rjmp	.-12     	; 0x12c <lcd_Print+0xe>
	{
		lcddata(str[i]);
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <lcd_init>:
	_delay_ms(2);
	PORTD &= ~(1<<EN);
}

void lcd_init(){
	DDRC= 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	84 bb       	out	0x14, r24	; 20
	DDRD |=(1<<EN); //Define EN pin  as output
 142:	88 9a       	sbi	0x11, 0	; 17
	DDRB=0b11110111; //0xff define RS and  RW pin as output
 144:	87 ef       	ldi	r24, 0xF7	; 247
 146:	87 bb       	out	0x17, r24	; 23
	PORTD&= ~(1<<EN); //initialize EN=0
 148:	90 98       	cbi	0x12, 0	; 18
	lcdcmd(0x33);
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcdcmd(0x32);
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcdcmd(0x28); // LCD in 4 bit mode
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcdcmd(0x0E); //display on cursor on
 15c:	8e e0       	ldi	r24, 0x0E	; 14
 15e:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	/*lcddata(72);
	lcddata(69);
	lcddata(76);
	lcddata(76);
	lcddata(79);*/
	lcd_Print("WELCOME");
 162:	80 e6       	ldi	r24, 0x60	; 96
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	83 ef       	ldi	r24, 0xF3	; 243
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <lcd_init+0x32>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_init+0x3c>
 17a:	00 00       	nop
	_delay_ms(40);
	lcdcmd(0x01); //clear LCD
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcd_Print("Enter the Number");
 182:	88 e6       	ldi	r24, 0x68	; 104
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
    lcdcmd(0xc0);//set the curser to second line 
 18a:	80 ec       	ldi	r24, 0xC0	; 192
 18c:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcd_Print("of cans and");
 190:	89 e7       	ldi	r24, 0x79	; 121
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	83 ef       	ldi	r24, 0xF3	; 243
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <lcd_init+0x60>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x6a>
 1a8:	00 00       	nop
	_delay_ms(40);
	lcdcmd(0x01); //clear LCD
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcdcmd(0x80);//set the curser to first line 
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	lcd_Print("Press + to start");
 1b6:	85 e8       	ldi	r24, 0x85	; 133
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	83 ef       	ldi	r24, 0xF3	; 243
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <lcd_init+0x86>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_init+0x90>
 1ce:	00 00       	nop
	_delay_ms(40);
	 lcdcmd(0xc0);//set the curser to second line
 1d0:	80 ec       	ldi	r24, 0xC0	; 192
 1d2:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	 lcd_Print("the process : ");
 1d6:	86 e9       	ldi	r24, 0x96	; 150
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
 1de:	08 95       	ret

000001e0 <keypad>:
	  //lcdcmd(0x80);	 
}

unsigned char keypad(){
	PORTA=0b11111110; // make 1st row 0
 1e0:	8e ef       	ldi	r24, 0xFE	; 254
 1e2:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 1e4:	cc 99       	sbic	0x19, 4	; 25
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <keypad+0x18>
 1e8:	8f ed       	ldi	r24, 0xDF	; 223
 1ea:	9e e2       	ldi	r25, 0x2E	; 46
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <keypad+0xc>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <keypad+0x12>
 1f2:	00 00       	nop
		_delay_ms(3);
		return '7';
 1f4:	87 e3       	ldi	r24, 0x37	; 55
 1f6:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 1f8:	cd 99       	sbic	0x19, 5	; 25
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <keypad+0x2c>
 1fc:	8f ed       	ldi	r24, 0xDF	; 223
 1fe:	9e e2       	ldi	r25, 0x2E	; 46
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <keypad+0x20>
 204:	00 c0       	rjmp	.+0      	; 0x206 <keypad+0x26>
 206:	00 00       	nop
		_delay_ms(3);
		return '8';
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 20c:	ce 99       	sbic	0x19, 6	; 25
 20e:	08 c0       	rjmp	.+16     	; 0x220 <keypad+0x40>
 210:	8f ed       	ldi	r24, 0xDF	; 223
 212:	9e e2       	ldi	r25, 0x2E	; 46
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <keypad+0x34>
 218:	00 c0       	rjmp	.+0      	; 0x21a <keypad+0x3a>
 21a:	00 00       	nop
		_delay_ms(3);
		return '9';
 21c:	89 e3       	ldi	r24, 0x39	; 57
 21e:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 220:	cf 99       	sbic	0x19, 7	; 25
 222:	08 c0       	rjmp	.+16     	; 0x234 <keypad+0x54>
 224:	8f ed       	ldi	r24, 0xDF	; 223
 226:	9e e2       	ldi	r25, 0x2E	; 46
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <keypad+0x48>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <keypad+0x4e>
 22e:	00 00       	nop
		_delay_ms(3);
		return '/';
 230:	8f e2       	ldi	r24, 0x2F	; 47
 232:	08 95       	ret
	}
	PORTA=0b11111101;
 234:	8d ef       	ldi	r24, 0xFD	; 253
 236:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 238:	cc 99       	sbic	0x19, 4	; 25
 23a:	08 c0       	rjmp	.+16     	; 0x24c <keypad+0x6c>
 23c:	8f ed       	ldi	r24, 0xDF	; 223
 23e:	9e e2       	ldi	r25, 0x2E	; 46
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <keypad+0x60>
 244:	00 c0       	rjmp	.+0      	; 0x246 <keypad+0x66>
 246:	00 00       	nop
		_delay_ms(3);
		return '4';
 248:	84 e3       	ldi	r24, 0x34	; 52
 24a:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 24c:	cd 99       	sbic	0x19, 5	; 25
 24e:	08 c0       	rjmp	.+16     	; 0x260 <keypad+0x80>
 250:	8f ed       	ldi	r24, 0xDF	; 223
 252:	9e e2       	ldi	r25, 0x2E	; 46
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <keypad+0x74>
 258:	00 c0       	rjmp	.+0      	; 0x25a <keypad+0x7a>
 25a:	00 00       	nop
		_delay_ms(3);
		return '5';
 25c:	85 e3       	ldi	r24, 0x35	; 53
 25e:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 260:	ce 99       	sbic	0x19, 6	; 25
 262:	08 c0       	rjmp	.+16     	; 0x274 <keypad+0x94>
 264:	8f ed       	ldi	r24, 0xDF	; 223
 266:	9e e2       	ldi	r25, 0x2E	; 46
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <keypad+0x88>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <keypad+0x8e>
 26e:	00 00       	nop
		_delay_ms(3);
		return '6';
 270:	86 e3       	ldi	r24, 0x36	; 54
 272:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 274:	cf 99       	sbic	0x19, 7	; 25
 276:	08 c0       	rjmp	.+16     	; 0x288 <keypad+0xa8>
 278:	8f ed       	ldi	r24, 0xDF	; 223
 27a:	9e e2       	ldi	r25, 0x2E	; 46
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <keypad+0x9c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <keypad+0xa2>
 282:	00 00       	nop
		_delay_ms(3);
		return '+';
 284:	8b e2       	ldi	r24, 0x2B	; 43
 286:	08 95       	ret
	}
	PORTA=0b11111011;
 288:	8b ef       	ldi	r24, 0xFB	; 251
 28a:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 28c:	cc 99       	sbic	0x19, 4	; 25
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <keypad+0xc0>
 290:	8f ed       	ldi	r24, 0xDF	; 223
 292:	9e e2       	ldi	r25, 0x2E	; 46
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <keypad+0xb4>
 298:	00 c0       	rjmp	.+0      	; 0x29a <keypad+0xba>
 29a:	00 00       	nop
		_delay_ms(3);
		return '1';
 29c:	81 e3       	ldi	r24, 0x31	; 49
 29e:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 2a0:	cd 99       	sbic	0x19, 5	; 25
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <keypad+0xd4>
 2a4:	8f ed       	ldi	r24, 0xDF	; 223
 2a6:	9e e2       	ldi	r25, 0x2E	; 46
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <keypad+0xc8>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <keypad+0xce>
 2ae:	00 00       	nop
		_delay_ms(3);
		return '2';
 2b0:	82 e3       	ldi	r24, 0x32	; 50
 2b2:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 2b4:	ce 99       	sbic	0x19, 6	; 25
 2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <keypad+0xe8>
 2b8:	8f ed       	ldi	r24, 0xDF	; 223
 2ba:	9e e2       	ldi	r25, 0x2E	; 46
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <keypad+0xdc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <keypad+0xe2>
 2c2:	00 00       	nop
		_delay_ms(3);
		return '3';
 2c4:	83 e3       	ldi	r24, 0x33	; 51
 2c6:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 2c8:	cf 99       	sbic	0x19, 7	; 25
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <keypad+0xfc>
 2cc:	8f ed       	ldi	r24, 0xDF	; 223
 2ce:	9e e2       	ldi	r25, 0x2E	; 46
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <keypad+0xf0>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <keypad+0xf6>
 2d6:	00 00       	nop
		_delay_ms(3);
		return '-';
 2d8:	8d e2       	ldi	r24, 0x2D	; 45
 2da:	08 95       	ret
	}
	PORTA=0b11110111;
 2dc:	87 ef       	ldi	r24, 0xF7	; 247
 2de:	8b bb       	out	0x1b, r24	; 27
	if((PINA & (1<<PINA4))==0){
 2e0:	cc 99       	sbic	0x19, 4	; 25
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <keypad+0x114>
 2e4:	8f ed       	ldi	r24, 0xDF	; 223
 2e6:	9e e2       	ldi	r25, 0x2E	; 46
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <keypad+0x108>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <keypad+0x10e>
 2ee:	00 00       	nop
		_delay_ms(3);
		return 'C';
 2f0:	83 e4       	ldi	r24, 0x43	; 67
 2f2:	08 95       	ret
		}else if((PINA & (1<<PINA5))==0){
 2f4:	cd 99       	sbic	0x19, 5	; 25
 2f6:	08 c0       	rjmp	.+16     	; 0x308 <keypad+0x128>
 2f8:	8f ed       	ldi	r24, 0xDF	; 223
 2fa:	9e e2       	ldi	r25, 0x2E	; 46
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <keypad+0x11c>
 300:	00 c0       	rjmp	.+0      	; 0x302 <keypad+0x122>
 302:	00 00       	nop
		_delay_ms(3);
		return '0';
 304:	80 e3       	ldi	r24, 0x30	; 48
 306:	08 95       	ret
		}else if((PINA & (1<<PINA6))==0){
 308:	ce 99       	sbic	0x19, 6	; 25
 30a:	08 c0       	rjmp	.+16     	; 0x31c <keypad+0x13c>
 30c:	8f ed       	ldi	r24, 0xDF	; 223
 30e:	9e e2       	ldi	r25, 0x2E	; 46
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <keypad+0x130>
 314:	00 c0       	rjmp	.+0      	; 0x316 <keypad+0x136>
 316:	00 00       	nop
		_delay_ms(3);
		return '=';
 318:	8d e3       	ldi	r24, 0x3D	; 61
 31a:	08 95       	ret
		}else if((PINA & (1<<PINA7))==0){
 31c:	cf 99       	sbic	0x19, 7	; 25
 31e:	08 c0       	rjmp	.+16     	; 0x330 <keypad+0x150>
 320:	8f ed       	ldi	r24, 0xDF	; 223
 322:	9e e2       	ldi	r25, 0x2E	; 46
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <keypad+0x144>
 328:	00 c0       	rjmp	.+0      	; 0x32a <keypad+0x14a>
 32a:	00 00       	nop
		_delay_ms(3);
		return '*';
 32c:	8a e2       	ldi	r24, 0x2A	; 42
 32e:	08 95       	ret
	}
}
 330:	08 95       	ret

00000332 <keypad_func>:
 int option=0;
 int validcan=0;
 

unsigned char keypad();
int keypad_func(){
 332:	8f 92       	push	r8
 334:	9f 92       	push	r9
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	2a 97       	sbiw	r28, 0x0a	; 10
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
	unsigned char x;
	char no[10];
	int i=0;
	int i1=0;
	DDRA =0x0F; // make PA0 to PA3 = output and PA4 to PA7 = Input
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
 35e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_init>
unsigned char keypad();
int keypad_func(){
	unsigned char x;
	char no[10];
	int i=0;
	int i1=0;
 362:	00 e0       	ldi	r16, 0x00	; 0
 364:	10 e0       	ldi	r17, 0x00	; 0

unsigned char keypad();
int keypad_func(){
	unsigned char x;
	char no[10];
	int i=0;
 366:	e1 2c       	mov	r14, r1
 368:	f1 2c       	mov	r15, r1
	int i1=0;
	DDRA =0x0F; // make PA0 to PA3 = output and PA4 to PA7 = Input
	lcd_init();
	while(1){
		PORTA=0xF0; // make all 4 column 1 and all rows 0
 36a:	0f 2e       	mov	r0, r31
 36c:	f0 ef       	ldi	r31, 0xF0	; 240
 36e:	9f 2e       	mov	r9, r31
 370:	f0 2d       	mov	r31, r0
							lcdcmd(0x01);
							break;
						}
						//donate
						else if(x=='3'){
							option=3;
 372:	0f 2e       	mov	r0, r31
 374:	f3 e0       	ldi	r31, 0x03	; 3
 376:	af 2e       	mov	r10, r31
 378:	b1 2c       	mov	r11, r1
 37a:	f0 2d       	mov	r31, r0
							lcdcmd(0x01);//clear lcd
							break;
						}
						//easy cash
						else if(x=='2'){
							option=2;
 37c:	68 94       	set
 37e:	cc 24       	eor	r12, r12
 380:	c1 f8       	bld	r12, 1
 382:	d1 2c       	mov	r13, r1
	int i=0;
	int i1=0;
	DDRA =0x0F; // make PA0 to PA3 = output and PA4 to PA7 = Input
	lcd_init();
	while(1){
		PORTA=0xF0; // make all 4 column 1 and all rows 0
 384:	9b ba       	out	0x1b, r9	; 27
		if(PINA!= 0xF0){
 386:	89 b3       	in	r24, 0x19	; 25
 388:	80 3f       	cpi	r24, 0xF0	; 240
 38a:	e1 f3       	breq	.-8      	; 0x384 <keypad_func+0x52>
 38c:	8f e1       	ldi	r24, 0x1F	; 31
 38e:	9e e4       	ldi	r25, 0x4E	; 78
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <keypad_func+0x5e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <keypad_func+0x64>
 396:	00 00       	nop
			_delay_ms(5);
			x=keypad();
 398:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <keypad>
 39c:	88 2e       	mov	r8, r24
			if (x=='*')
 39e:	9a e2       	ldi	r25, 0x2A	; 42
 3a0:	89 13       	cpse	r24, r25
 3a2:	ab c0       	rjmp	.+342    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			{
				lcdcmd(0x01);//clear lcd
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcdcmd(0x80);//set the curser to first line
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcd_Print("1-Fast Charge");
 3b4:	85 ea       	ldi	r24, 0xA5	; 165
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
				lcdcmd(0xc0);//set the curser to second line
 3bc:	80 ec       	ldi	r24, 0xC0	; 192
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcd_Print("2-Ez Cash");
 3c4:	83 eb       	ldi	r24, 0xB3	; 179
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	81 ee       	ldi	r24, 0xE1	; 225
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <keypad_func+0xa0>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <keypad_func+0xaa>
 3dc:	00 00       	nop
				_delay_ms(100);
				lcdcmd(0x01);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcdcmd(0x80);//set the curser to first line
 3e6:	80 e8       	ldi	r24, 0x80	; 128
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcd_Print("3-Donate");
 3ee:	8d eb       	ldi	r24, 0xBD	; 189
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
				
				while(1){
					if(PINA!= 0xF0){
 3f6:	89 b3       	in	r24, 0x19	; 25
 3f8:	80 3f       	cpi	r24, 0xF0	; 240
 3fa:	e9 f3       	breq	.-6      	; 0x3f6 <keypad_func+0xc4>
						x=keypad();
 3fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <keypad>
						//charge
						if(x=='1'){
 400:	81 33       	cpi	r24, 0x31	; 49
 402:	c9 f4       	brne	.+50     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
							option=1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <option+0x1>
 40c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <option>
 410:	8f e1       	ldi	r24, 0x1F	; 31
 412:	9e e4       	ldi	r25, 0x4E	; 78
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
							_delay_ms(5);
							lcdcmd(0x80);//set the curser to first line
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							lcd_Print(" ");
 424:	83 ea       	ldi	r24, 0xA3	; 163
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
							lcdcmd(0x01);//clear lcd
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							break;
 434:	a7 cf       	rjmp	.-178    	; 0x384 <keypad_func+0x52>
						}
						//easy cash
						else if(x=='2'){
 436:	82 33       	cpi	r24, 0x32	; 50
 438:	09 f0       	breq	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	57 c0       	rjmp	.+174    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
							option=2;
 43c:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <option+0x1>
 440:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <option>
							get_pn=1;//get phone no
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <get_pn+0x1>
 44c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <get_pn>
 450:	8f e1       	ldi	r24, 0x1F	; 31
 452:	9e e4       	ldi	r25, 0x4E	; 78
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
							_delay_ms(5);
							lcdcmd(0x80);//set the curser to first line
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							lcd_Print(" ");
 464:	83 ea       	ldi	r24, 0xA3	; 163
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
							lcdcmd(0x01);//clear lcd
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							lcd_Print("Enter the Phone");
 474:	86 ec       	ldi	r24, 0xC6	; 198
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
							lcdcmd(0xc0);
 47c:	80 ec       	ldi	r24, 0xC0	; 192
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							lcd_Print("Number");
 484:	82 e7       	ldi	r24, 0x72	; 114
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
							lcdcmd(0x80);
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
 494:	9f ef       	ldi	r25, 0xFF	; 255
 496:	21 ee       	ldi	r18, 0xE1	; 225
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	20 40       	sbci	r18, 0x00	; 0
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
							_delay_ms(100);
							lcdcmd(0x01);
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							lcd_Print("Press = to");
 4ae:	86 ed       	ldi	r24, 0xD6	; 214
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
							lcdcmd(0xc0);
 4b6:	80 ec       	ldi	r24, 0xC0	; 192
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							lcd_Print("Finish");
 4be:	81 ee       	ldi	r24, 0xE1	; 225
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
							lcdcmd(0x80);
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
 4ce:	9f ef       	ldi	r25, 0xFF	; 255
 4d0:	21 ee       	ldi	r18, 0xE1	; 225
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	91 50       	subi	r25, 0x01	; 1
 4d6:	20 40       	sbci	r18, 0x00	; 0
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4de:	00 00       	nop
							_delay_ms(100);
							lcdcmd(0x01);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
							break;
 4e8:	4d cf       	rjmp	.-358    	; 0x384 <keypad_func+0x52>
						}
						//donate
						else if(x=='3'){
 4ea:	83 33       	cpi	r24, 0x33	; 51
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ee:	83 cf       	rjmp	.-250    	; 0x3f6 <keypad_func+0xc4>
							option=3;
 4f0:	b0 92 29 01 	sts	0x0129, r11	; 0x800129 <option+0x1>
 4f4:	a0 92 28 01 	sts	0x0128, r10	; 0x800128 <option>
 4f8:	7e cf       	rjmp	.-260    	; 0x3f6 <keypad_func+0xc4>

				}
				
				
			}
			else if (x=='=')
 4fa:	9d e3       	ldi	r25, 0x3D	; 61
 4fc:	89 17       	cp	r24, r25
 4fe:	d9 f0       	breq	.+54     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
				return 0;		
			}
			else
			{
				
				lcddata(x);
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 76 00 	call	0xec	; 0xec <lcddata>
				if(get_pn==1){
 506:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <get_pn>
 50a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <get_pn+0x1>
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	59 f4       	brne	.+22     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
					no[i]=x;
 512:	e1 e0       	ldi	r30, 0x01	; 1
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	ec 0f       	add	r30, r28
 518:	fd 1f       	adc	r31, r29
 51a:	ee 0d       	add	r30, r14
 51c:	ff 1d       	adc	r31, r15
 51e:	80 82       	st	Z, r8
					i++;
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	e2 1a       	sub	r14, r18
 524:	f2 0a       	sbc	r15, r18
 526:	2e cf       	rjmp	.-420    	; 0x384 <keypad_func+0x52>
				}
				else{
					can_no[i1]=x;
 528:	f8 01       	movw	r30, r16
 52a:	e2 5d       	subi	r30, 0xD2	; 210
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
 52e:	80 82       	st	Z, r8
					i1++;
 530:	0f 5f       	subi	r16, 0xFF	; 255
 532:	1f 4f       	sbci	r17, 0xFF	; 255
 534:	27 cf       	rjmp	.-434    	; 0x384 <keypad_func+0x52>
				
			}
			else if (x=='=')
			{
				
				get_pn=0;
 536:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <get_pn+0x1>
 53a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <get_pn>
				lcdcmd(0x01);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcd_Print("Entered phone NO.:");
 546:	88 ee       	ldi	r24, 0xE8	; 232
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
				lcdcmd(0xc0);
 54e:	80 ec       	ldi	r24, 0xC0	; 192
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				lcd_Print(&no);//print the no
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
				lcdcmd(0x80);
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				//lcd_Print(&can_no);//print the no
				int phone_no= atoi(no);//phone number in int
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	0e 94 25 04 	call	0x84a	; 0x84a <atoi>
 56e:	2f ef       	ldi	r18, 0xFF	; 255
 570:	81 ee       	ldi	r24, 0xE1	; 225
 572:	94 e0       	ldi	r25, 0x04	; 4
 574:	21 50       	subi	r18, 0x01	; 1
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	90 40       	sbci	r25, 0x00	; 0
 57a:	e1 f7       	brne	.-8      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 57e:	00 00       	nop
				_delay_ms(100);
				lcdcmd(0x01);
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	81 ee       	ldi	r24, 0xE1	; 225
 58c:	94 e0       	ldi	r25, 0x04	; 4
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 596:	00 c0       	rjmp	.+0      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 598:	00 00       	nop
			
				_delay_ms(100);
				lcdcmd(0x01);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
				
			}
		}
	}
	
}
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	2a 96       	adiw	r28, 0x0a	; 10
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	df 90       	pop	r13
 5c0:	cf 90       	pop	r12
 5c2:	bf 90       	pop	r11
 5c4:	af 90       	pop	r10
 5c6:	9f 90       	pop	r9
 5c8:	8f 90       	pop	r8
 5ca:	08 95       	ret

000005cc <Stepper_motor>:

int Stepper_motor(){
	
	//Set a1, a2, a3, a4 as output

	DDRD |= a1 | a2 | a3| a4;
 5cc:	81 b3       	in	r24, 0x11	; 17
 5ce:	80 6f       	ori	r24, 0xF0	; 240
 5d0:	81 bb       	out	0x11, r24	; 17

	//Set input & pull-up resistor

	DDRD &= ~SW;
 5d2:	8b 98       	cbi	0x11, 3	; 17

	PORTD |= SW;
 5d4:	93 9a       	sbi	0x12, 3	; 18
	
	DDRD &= ~SW2;
 5d6:	8a 98       	cbi	0x11, 2	; 17

	PORTD |= SW2;
 5d8:	92 9a       	sbi	0x12, 2	; 18
	
	while(1){
		
		if((PIND & SW) && (PIND & SW2)){
 5da:	83 9b       	sbis	0x10, 3	; 16
 5dc:	fe cf       	rjmp	.-4      	; 0x5da <Stepper_motor+0xe>
 5de:	82 9b       	sbis	0x10, 2	; 16
 5e0:	fc cf       	rjmp	.-8      	; 0x5da <Stepper_motor+0xe>

			while(1){
				
				if((!(PIND & SW2))){
 5e2:	82 99       	sbic	0x10, 2	; 16
 5e4:	47 c0       	rjmp	.+142    	; 0x674 <Stepper_motor+0xa8>
					
					while(1){
						if((!(PIND & SW))){
 5e6:	83 99       	sbic	0x10, 3	; 16
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <Stepper_motor+0x1a>
							validcan++;
 5ea:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 5ee:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 5f8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>

							PORTD |= a1;
 5fc:	94 9a       	sbi	0x12, 4	; 18

							PORTD &= ~a2;
 5fe:	95 98       	cbi	0x12, 5	; 18

							PORTD &= ~a3;
 600:	96 98       	cbi	0x12, 6	; 18

							PORTD &= ~a4;
 602:	97 98       	cbi	0x12, 7	; 18
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	89 ef       	ldi	r24, 0xF9	; 249
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <Stepper_motor+0x3e>
 612:	00 c0       	rjmp	.+0      	; 0x614 <Stepper_motor+0x48>
 614:	00 00       	nop

							_delay_ms(20);


							PORTD |= a1;
 616:	94 9a       	sbi	0x12, 4	; 18

							PORTD &= ~a2;
 618:	95 98       	cbi	0x12, 5	; 18

							PORTD  &= ~ a3;
 61a:	96 98       	cbi	0x12, 6	; 18

							PORTD |= a4;
 61c:	97 9a       	sbi	0x12, 7	; 18
 61e:	8f e7       	ldi	r24, 0x7F	; 127
 620:	9e e3       	ldi	r25, 0x3E	; 62
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <Stepper_motor+0x56>
 626:	00 c0       	rjmp	.+0      	; 0x628 <Stepper_motor+0x5c>
 628:	00 00       	nop

							_delay_ms(4);
							
							
							PORTD &= ~a1;
 62a:	94 98       	cbi	0x12, 4	; 18

							PORTD &= ~a2;
 62c:	95 98       	cbi	0x12, 5	; 18

							PORTD &= ~a3;
 62e:	96 98       	cbi	0x12, 6	; 18

							PORTD |= a4;
 630:	97 9a       	sbi	0x12, 7	; 18
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	29 ef       	ldi	r18, 0xF9	; 249
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	20 40       	sbci	r18, 0x00	; 0
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <Stepper_motor+0x6c>
 640:	00 c0       	rjmp	.+0      	; 0x642 <Stepper_motor+0x76>
 642:	00 00       	nop

							_delay_ms(20);
							
							
							PORTD |= a1;
 644:	94 9a       	sbi	0x12, 4	; 18

							PORTD &= ~a2;
 646:	95 98       	cbi	0x12, 5	; 18

							PORTD &= ~ a3;
 648:	96 98       	cbi	0x12, 6	; 18

							PORTD |= a4;
 64a:	97 9a       	sbi	0x12, 7	; 18
 64c:	8f e7       	ldi	r24, 0x7F	; 127
 64e:	9e e3       	ldi	r25, 0x3E	; 62
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <Stepper_motor+0x84>
 654:	00 c0       	rjmp	.+0      	; 0x656 <Stepper_motor+0x8a>
 656:	00 00       	nop

							_delay_ms(4);
							
							
							PORTD |= a1;
 658:	94 9a       	sbi	0x12, 4	; 18

							PORTD &= ~a2;
 65a:	95 98       	cbi	0x12, 5	; 18

							PORTD &= ~a3;
 65c:	96 98       	cbi	0x12, 6	; 18

							PORTD &= ~a4;
 65e:	97 98       	cbi	0x12, 7	; 18
 660:	9f ef       	ldi	r25, 0xFF	; 255
 662:	29 ef       	ldi	r18, 0xF9	; 249
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	91 50       	subi	r25, 0x01	; 1
 668:	20 40       	sbci	r18, 0x00	; 0
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <Stepper_motor+0x9a>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <Stepper_motor+0xa4>
 670:	00 00       	nop

							_delay_ms(20);
							return 0;
 672:	3d c0       	rjmp	.+122    	; 0x6ee <Stepper_motor+0x122>
						}
					}
				}
				

				else if(!(PIND & SW)){
 674:	83 99       	sbic	0x10, 3	; 16
 676:	b5 cf       	rjmp	.-150    	; 0x5e2 <Stepper_motor+0x16>


					PORTD |= a1;
 678:	94 9a       	sbi	0x12, 4	; 18

					PORTD &= ~a2;
 67a:	95 98       	cbi	0x12, 5	; 18

					PORTD &= ~a3;
 67c:	96 98       	cbi	0x12, 6	; 18

					PORTD &= ~a4;
 67e:	97 98       	cbi	0x12, 7	; 18
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	29 ef       	ldi	r18, 0xF9	; 249
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	91 50       	subi	r25, 0x01	; 1
 688:	20 40       	sbci	r18, 0x00	; 0
 68a:	80 40       	sbci	r24, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <Stepper_motor+0xba>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <Stepper_motor+0xc4>
 690:	00 00       	nop

					_delay_ms(20);



					PORTD |= a1;
 692:	94 9a       	sbi	0x12, 4	; 18

					PORTD &= ~a2;
 694:	95 98       	cbi	0x12, 5	; 18

					PORTD |= a3;
 696:	96 9a       	sbi	0x12, 6	; 18

					PORTD &= ~a4;
 698:	97 98       	cbi	0x12, 7	; 18
 69a:	8f e7       	ldi	r24, 0x7F	; 127
 69c:	9e e3       	ldi	r25, 0x3E	; 62
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <Stepper_motor+0xd2>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <Stepper_motor+0xd8>
 6a4:	00 00       	nop
					_delay_ms(4);
					
					

					
					PORTD &= ~a1;
 6a6:	94 98       	cbi	0x12, 4	; 18

					PORTD &= ~a2;
 6a8:	95 98       	cbi	0x12, 5	; 18

					PORTD |= a3;
 6aa:	96 9a       	sbi	0x12, 6	; 18

					PORTD &= ~a4;
 6ac:	97 98       	cbi	0x12, 7	; 18
 6ae:	9f ef       	ldi	r25, 0xFF	; 255
 6b0:	29 ef       	ldi	r18, 0xF9	; 249
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 50       	subi	r25, 0x01	; 1
 6b6:	20 40       	sbci	r18, 0x00	; 0
 6b8:	80 40       	sbci	r24, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <Stepper_motor+0xe8>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <Stepper_motor+0xf2>
 6be:	00 00       	nop

					_delay_ms(20);
					
					
					PORTD |= a1;
 6c0:	94 9a       	sbi	0x12, 4	; 18

					PORTD &= ~a2;
 6c2:	95 98       	cbi	0x12, 5	; 18

					PORTD |= a3;
 6c4:	96 9a       	sbi	0x12, 6	; 18

					PORTD &= ~a4;
 6c6:	97 98       	cbi	0x12, 7	; 18
 6c8:	8f e7       	ldi	r24, 0x7F	; 127
 6ca:	9e e3       	ldi	r25, 0x3E	; 62
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <Stepper_motor+0x100>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <Stepper_motor+0x106>
 6d2:	00 00       	nop

					_delay_ms(4);
					
					
					
					PORTD |= a1;
 6d4:	94 9a       	sbi	0x12, 4	; 18

					PORTD &= ~a2;
 6d6:	95 98       	cbi	0x12, 5	; 18

					PORTD &= ~a3;
 6d8:	96 98       	cbi	0x12, 6	; 18

					PORTD &= ~a4;
 6da:	97 98       	cbi	0x12, 7	; 18
 6dc:	9f ef       	ldi	r25, 0xFF	; 255
 6de:	29 ef       	ldi	r18, 0xF9	; 249
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	20 40       	sbci	r18, 0x00	; 0
 6e6:	80 40       	sbci	r24, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <Stepper_motor+0x116>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <Stepper_motor+0x120>
 6ec:	00 00       	nop
					return 0;
				}
			}
		}
	}
}
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	08 95       	ret

000006f4 <ir2_func>:
int ir2_func(){
	while(1){
		
		if(PINB & 0b00001000){
 6f4:	b3 9b       	sbis	0x16, 3	; 22
 6f6:	30 c0       	rjmp	.+96     	; 0x758 <ir2_func+0x64>
			lcdcmd(0x01); //clear LCD
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
			lcdcmd(0x80);//set the curser to first line
 6fe:	80 e8       	ldi	r24, 0x80	; 128
 700:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
			lcd_Print("Discard bin is");
 704:	8b ef       	ldi	r24, 0xFB	; 251
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
			lcdcmd(0xc0);//set the curser to second line
 70c:	80 ec       	ldi	r24, 0xC0	; 192
 70e:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
			lcd_Print("full");
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
			lcdcmd(0x80);//set the curser to first line
 71a:	80 e8       	ldi	r24, 0x80	; 128
 71c:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	80 e7       	ldi	r24, 0x70	; 112
 724:	92 e0       	ldi	r25, 0x02	; 2
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <ir2_func+0x32>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <ir2_func+0x3c>
 730:	00 00       	nop
			_delay_ms(50);
			lcdcmd(0x01); //clear LCD
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
			lcd_Print("Clear the");
 738:	8f e0       	ldi	r24, 0x0F	; 15
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
			lcdcmd(0xc0);//set the curser to second line
 740:	80 ec       	ldi	r24, 0xC0	; 192
 742:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
			lcd_Print("discard bin");
 746:	89 e1       	ldi	r24, 0x19	; 25
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_Print>
			lcdcmd(0x80);//set the curser to first line
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	0e 94 5d 00 	call	0xba	; 0xba <lcdcmd>
	}
}
int ir2_func(){
	while(1){
		
		if(PINB & 0b00001000){
 754:	b3 99       	sbic	0x16, 3	; 22
 756:	d0 cf       	rjmp	.-96     	; 0x6f8 <ir2_func+0x4>
			return 0;
		}
		
	}
	
}
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	08 95       	ret

0000075e <main>:
		temp=phone_no;
		
		SPI_Init();
		SS_Enable;
		
		SPI_Write(option);
 75e:	0f 2e       	mov	r0, r31
 760:	f8 e2       	ldi	r31, 0x28	; 40
 762:	cf 2e       	mov	r12, r31
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	df 2e       	mov	r13, r31
 768:	f0 2d       	mov	r31, r0
		if(option==2)
		{
			for(int i=0;i<10;i++)  /* preparing the phone number to transmit to the slave */
			{
				trans_num=temp%10;
				SPI_Write(trans_num);
 76a:	0a e0       	ldi	r16, 0x0A	; 10
 76c:	10 e0       	ldi	r17, 0x00	; 0
			Stepper_motor();
			}
			
		}
		
		SPI_Write(validcan);
 76e:	0f 2e       	mov	r0, r31
 770:	f6 e2       	ldi	r31, 0x26	; 38
 772:	ef 2e       	mov	r14, r31
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	ff 2e       	mov	r15, r31
 778:	f0 2d       	mov	r31, r0
	int trans_num=0;
	int temp=0;
	
    while(1){
		
		keypad_func();
 77a:	0e 94 99 01 	call	0x332	; 0x332 <keypad_func>
		
		temp=phone_no;
 77e:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <phone_no>
 782:	d0 91 2d 01 	lds	r29, 0x012D	; 0x80012d <phone_no+0x1>
		
		SPI_Init();
 786:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Init>
		SS_Enable;
 78a:	c4 98       	cbi	0x18, 4	; 24
		
		SPI_Write(option);
 78c:	f6 01       	movw	r30, r12
 78e:	80 81       	ld	r24, Z
 790:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Write>
		
		if(option==2)
 794:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <option>
 798:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <option+0x1>
 79c:	02 97       	sbiw	r24, 0x02	; 2
 79e:	91 f4       	brne	.+36     	; 0x7c4 <main+0x66>
 7a0:	0f 2e       	mov	r0, r31
 7a2:	fa e0       	ldi	r31, 0x0A	; 10
 7a4:	af 2e       	mov	r10, r31
 7a6:	b1 2c       	mov	r11, r1
 7a8:	f0 2d       	mov	r31, r0
		{
			for(int i=0;i<10;i++)  /* preparing the phone number to transmit to the slave */
			{
				trans_num=temp%10;
				SPI_Write(trans_num);
 7aa:	8c 2f       	mov	r24, r28
 7ac:	9d 2f       	mov	r25, r29
 7ae:	b8 01       	movw	r22, r16
 7b0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divmodhi4>
 7b4:	c6 2f       	mov	r28, r22
 7b6:	d7 2f       	mov	r29, r23
 7b8:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Write>
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	af 1a       	sub	r10, r31
 7c0:	b1 08       	sbc	r11, r1
		
		SPI_Write(option);
		
		if(option==2)
		{
			for(int i=0;i<10;i++)  /* preparing the phone number to transmit to the slave */
 7c2:	99 f7       	brne	.-26     	; 0x7aa <main+0x4c>
				temp /=10;
			}
		}
		
		
		int can_number= atoi(can_no);
 7c4:	8e e2       	ldi	r24, 0x2E	; 46
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 25 04 	call	0x84a	; 0x84a <atoi>
 7cc:	5c 01       	movw	r10, r24
		
		r_slave=SPI_Read();
 7ce:	0e 94 57 00 	call	0xae	; 0xae <SPI_Read>

		if(r_slave)
 7d2:	88 23       	and	r24, r24
 7d4:	69 f0       	breq	.+26     	; 0x7f0 <main+0x92>
		{
			for(int k=0;k<can_number;k++){
 7d6:	1a 14       	cp	r1, r10
 7d8:	1b 04       	cpc	r1, r11
 7da:	54 f4       	brge	.+20     	; 0x7f0 <main+0x92>
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
 7de:	d0 e0       	ldi	r29, 0x00	; 0
			ir2_func();
 7e0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ir2_func>
			Stepper_motor();
 7e4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Stepper_motor>
		
		r_slave=SPI_Read();

		if(r_slave)
		{
			for(int k=0;k<can_number;k++){
 7e8:	21 96       	adiw	r28, 0x01	; 1
 7ea:	ac 16       	cp	r10, r28
 7ec:	bd 06       	cpc	r11, r29
 7ee:	c1 f7       	brne	.-16     	; 0x7e0 <main+0x82>
			Stepper_motor();
			}
			
		}
		
		SPI_Write(validcan);
 7f0:	f7 01       	movw	r30, r14
 7f2:	80 81       	ld	r24, Z
 7f4:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_Write>
	}
 7f8:	c0 cf       	rjmp	.-128    	; 0x77a <main+0x1c>

000007fa <__divmodhi4>:
 7fa:	97 fb       	bst	r25, 7
 7fc:	07 2e       	mov	r0, r23
 7fe:	16 f4       	brtc	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	00 94       	com	r0
 802:	07 d0       	rcall	.+14     	; 0x812 <__divmodhi4_neg1>
 804:	77 fd       	sbrc	r23, 7
 806:	09 d0       	rcall	.+18     	; 0x81a <__divmodhi4_neg2>
 808:	0e 94 11 04 	call	0x822	; 0x822 <__udivmodhi4>
 80c:	07 fc       	sbrc	r0, 7
 80e:	05 d0       	rcall	.+10     	; 0x81a <__divmodhi4_neg2>
 810:	3e f4       	brtc	.+14     	; 0x820 <__divmodhi4_exit>

00000812 <__divmodhi4_neg1>:
 812:	90 95       	com	r25
 814:	81 95       	neg	r24
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <__divmodhi4_neg2>:
 81a:	70 95       	com	r23
 81c:	61 95       	neg	r22
 81e:	7f 4f       	sbci	r23, 0xFF	; 255

00000820 <__divmodhi4_exit>:
 820:	08 95       	ret

00000822 <__udivmodhi4>:
 822:	aa 1b       	sub	r26, r26
 824:	bb 1b       	sub	r27, r27
 826:	51 e1       	ldi	r21, 0x11	; 17
 828:	07 c0       	rjmp	.+14     	; 0x838 <__udivmodhi4_ep>

0000082a <__udivmodhi4_loop>:
 82a:	aa 1f       	adc	r26, r26
 82c:	bb 1f       	adc	r27, r27
 82e:	a6 17       	cp	r26, r22
 830:	b7 07       	cpc	r27, r23
 832:	10 f0       	brcs	.+4      	; 0x838 <__udivmodhi4_ep>
 834:	a6 1b       	sub	r26, r22
 836:	b7 0b       	sbc	r27, r23

00000838 <__udivmodhi4_ep>:
 838:	88 1f       	adc	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	5a 95       	dec	r21
 83e:	a9 f7       	brne	.-22     	; 0x82a <__udivmodhi4_loop>
 840:	80 95       	com	r24
 842:	90 95       	com	r25
 844:	bc 01       	movw	r22, r24
 846:	cd 01       	movw	r24, r26
 848:	08 95       	ret

0000084a <atoi>:
 84a:	fc 01       	movw	r30, r24
 84c:	88 27       	eor	r24, r24
 84e:	99 27       	eor	r25, r25
 850:	e8 94       	clt
 852:	21 91       	ld	r18, Z+
 854:	20 32       	cpi	r18, 0x20	; 32
 856:	e9 f3       	breq	.-6      	; 0x852 <atoi+0x8>
 858:	29 30       	cpi	r18, 0x09	; 9
 85a:	10 f0       	brcs	.+4      	; 0x860 <__stack+0x1>
 85c:	2e 30       	cpi	r18, 0x0E	; 14
 85e:	c8 f3       	brcs	.-14     	; 0x852 <atoi+0x8>
 860:	2b 32       	cpi	r18, 0x2B	; 43
 862:	41 f0       	breq	.+16     	; 0x874 <__stack+0x15>
 864:	2d 32       	cpi	r18, 0x2D	; 45
 866:	39 f4       	brne	.+14     	; 0x876 <__stack+0x17>
 868:	68 94       	set
 86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>
 86c:	0e 94 43 04 	call	0x886	; 0x886 <__mulhi_const_10>
 870:	82 0f       	add	r24, r18
 872:	91 1d       	adc	r25, r1
 874:	21 91       	ld	r18, Z+
 876:	20 53       	subi	r18, 0x30	; 48
 878:	2a 30       	cpi	r18, 0x0A	; 10
 87a:	c0 f3       	brcs	.-16     	; 0x86c <__stack+0xd>
 87c:	1e f4       	brtc	.+6      	; 0x884 <__stack+0x25>
 87e:	90 95       	com	r25
 880:	81 95       	neg	r24
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	08 95       	ret

00000886 <__mulhi_const_10>:
 886:	7a e0       	ldi	r23, 0x0A	; 10
 888:	97 9f       	mul	r25, r23
 88a:	90 2d       	mov	r25, r0
 88c:	87 9f       	mul	r24, r23
 88e:	80 2d       	mov	r24, r0
 890:	91 0d       	add	r25, r1
 892:	11 24       	eor	r1, r1
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
