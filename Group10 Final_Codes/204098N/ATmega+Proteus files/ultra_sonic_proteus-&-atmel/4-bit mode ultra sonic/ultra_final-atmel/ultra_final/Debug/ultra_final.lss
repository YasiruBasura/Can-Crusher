
ultra_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000006e8  0000077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000aa  008000aa  000007c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e78  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075f  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053f  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c2  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 01 	call	0x2c6	; 0x2c6 <main>
  8a:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HCSR04Init>:

void HCSR04Init()
{
	
	
	US_DDR|=(1<<US_TRIG_POS);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	81 60       	ori	r24, 0x01	; 1
  96:	84 bb       	out	0x14, r24	; 20
  98:	08 95       	ret

0000009a <HCSR04Trigger>:
}

void HCSR04Trigger()
{  
	
	US_PORT|=(1<<US_TRIG_POS);	
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	80 e5       	ldi	r24, 0x50	; 80
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <HCSR04Trigger+0x8>
	
	_delay_us(15);				
	
	US_PORT&=~(1<<US_TRIG_POS);	
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	85 bb       	out	0x15, r24	; 21
  ac:	08 95       	ret

000000ae <GetPulseWidth>:
	
	
	uint32_t i,result;


	for(i=0;i<600000;i++)
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	dc 01       	movw	r26, r24
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
  b6:	99 99       	sbic	0x13, 1	; 19
  b8:	0a c0       	rjmp	.+20     	; 0xce <GetPulseWidth+0x20>
	
	
	uint32_t i,result;


	for(i=0;i<600000;i++)
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	a1 1d       	adc	r26, r1
  be:	b1 1d       	adc	r27, r1
  c0:	80 3c       	cpi	r24, 0xC0	; 192
  c2:	27 e2       	ldi	r18, 0x27	; 39
  c4:	92 07       	cpc	r25, r18
  c6:	29 e0       	ldi	r18, 0x09	; 9
  c8:	a2 07       	cpc	r26, r18
  ca:	b1 05       	cpc	r27, r1
  cc:	a0 f3       	brcs	.-24     	; 0xb6 <GetPulseWidth+0x8>
		continue;	
		else
		break;		
	}

	if(i==600000)
  ce:	80 3c       	cpi	r24, 0xC0	; 192
  d0:	97 42       	sbci	r25, 0x27	; 39
  d2:	a9 40       	sbci	r26, 0x09	; 9
  d4:	b1 05       	cpc	r27, r1
  d6:	79 f1       	breq	.+94     	; 0x136 <GetPulseWidth+0x88>
	return US_ERROR;	
	
	TCCR1A=0X00;
  d8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			
  de:	1d bc       	out	0x2d, r1	; 45
  e0:	1c bc       	out	0x2c, r1	; 44

	
	for(i=0;i<600000;i++)              
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	dc 01       	movw	r26, r24
  e8:	0a c0       	rjmp	.+20     	; 0xfe <GetPulseWidth+0x50>
	{
		if(US_PIN & (1<<US_ECHO_POS))
  ea:	99 9b       	sbis	0x13, 1	; 19
  ec:	0f c0       	rjmp	.+30     	; 0x10c <GetPulseWidth+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;  
  ee:	2c b5       	in	r18, 0x2c	; 44
  f0:	3d b5       	in	r19, 0x2d	; 45
  f2:	21 36       	cpi	r18, 0x61	; 97
  f4:	3a 4e       	sbci	r19, 0xEA	; 234
  f6:	50 f4       	brcc	.+20     	; 0x10c <GetPulseWidth+0x5e>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	
	TCNT1=0x00;			

	
	for(i=0;i<600000;i++)              
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	a1 1d       	adc	r26, r1
  fc:	b1 1d       	adc	r27, r1
  fe:	80 3c       	cpi	r24, 0xC0	; 192
 100:	27 e2       	ldi	r18, 0x27	; 39
 102:	92 07       	cpc	r25, r18
 104:	29 e0       	ldi	r18, 0x09	; 9
 106:	a2 07       	cpc	r26, r18
 108:	b1 05       	cpc	r27, r1
 10a:	78 f3       	brcs	.-34     	; 0xea <GetPulseWidth+0x3c>
		}
		else
		break;
	}

	if(i==600000)
 10c:	80 3c       	cpi	r24, 0xC0	; 192
 10e:	97 42       	sbci	r25, 0x27	; 39
 110:	a9 40       	sbci	r26, 0x09	; 9
 112:	b1 05       	cpc	r27, r1
 114:	99 f0       	breq	.+38     	; 0x13c <GetPulseWidth+0x8e>
	return US_NO_OBSTACLE;	

	

	result=TCNT1;          
 116:	8c b5       	in	r24, 0x2c	; 44
 118:	9d b5       	in	r25, 0x2d	; 45
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e0       	ldi	r27, 0x00	; 0

	
	TCCR1B=0x00;
 11e:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 120:	81 36       	cpi	r24, 0x61	; 97
 122:	2a ee       	ldi	r18, 0xEA	; 234
 124:	92 07       	cpc	r25, r18
 126:	a1 05       	cpc	r26, r1
 128:	b1 05       	cpc	r27, r1
 12a:	58 f4       	brcc	.+22     	; 0x142 <GetPulseWidth+0x94>
	return US_NO_OBSTACLE;	
	else
	return (result>>1);
 12c:	b6 95       	lsr	r27
 12e:	a7 95       	ror	r26
 130:	97 95       	ror	r25
 132:	87 95       	ror	r24
 134:	08 95       	ret
		else
		break;		
	}

	if(i==600000)
	return US_ERROR;	
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	9f ef       	ldi	r25, 0xFF	; 255
 13a:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	08 95       	ret

	
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 146:	08 95       	ret

00000148 <lcd_command>:
}

void lcd_command( unsigned char cmnd )
{

	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  
 148:	92 b3       	in	r25, 0x12	; 18
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	28 2f       	mov	r18, r24
 14e:	20 7f       	andi	r18, 0xF0	; 240
 150:	92 2b       	or	r25, r18
 152:	92 bb       	out	0x12, r25	; 18
	lcd_port &= ~ (1<<rs);
 154:	92 b3       	in	r25, 0x12	; 18
 156:	9e 7f       	andi	r25, 0xFE	; 254
 158:	92 bb       	out	0x12, r25	; 18
	lcd_port |= (1<<en);
 15a:	92 b3       	in	r25, 0x12	; 18
 15c:	92 60       	ori	r25, 0x02	; 2
 15e:	92 bb       	out	0x12, r25	; 18
 160:	35 e0       	ldi	r19, 0x05	; 5
 162:	3a 95       	dec	r19
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_command+0x1a>
 166:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9d 7f       	andi	r25, 0xFD	; 253
 16c:	92 bb       	out	0x12, r25	; 18
 16e:	ef e1       	ldi	r30, 0x1F	; 31
 170:	f3 e0       	ldi	r31, 0x03	; 3
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_command+0x2a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_command+0x30>
 178:	00 00       	nop
	
	
	_delay_us(200);
	
	
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
 17a:	22 b3       	in	r18, 0x12	; 18
 17c:	f0 e1       	ldi	r31, 0x10	; 16
 17e:	8f 9f       	mul	r24, r31
 180:	c0 01       	movw	r24, r0
 182:	11 24       	eor	r1, r1
 184:	92 2f       	mov	r25, r18
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	89 2b       	or	r24, r25
 18a:	82 bb       	out	0x12, r24	; 18
	lcd_port |= (1<<en);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	82 bb       	out	0x12, r24	; 18
 192:	35 e0       	ldi	r19, 0x05	; 5
 194:	3a 95       	dec	r19
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_command+0x4c>
 198:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9f e1       	ldi	r25, 0x1F	; 31
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_command+0x5c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_command+0x62>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <initialize>:



void initialize (void)
{
	lcd_data_dir = 0xFF;     //lcd pins that connected to micro-controller as out puts
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	8f e5       	ldi	r24, 0x5F	; 95
 1b4:	9a ee       	ldi	r25, 0xEA	; 234
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <initialize+0x8>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <initialize+0xe>
 1bc:	00 00       	nop
	_delay_ms(15);           
	lcd_command(0x02);       
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x28);      
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x0c);
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x06);
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	lcd_command(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9f e1       	ldi	r25, 0x1F	; 31
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <initialize+0x32>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <initialize+0x38>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <lcd_clear>:
	_delay_ms(2);
}

void lcd_clear()
{
	lcd_command (0x01);   
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9f e1       	ldi	r25, 0x1F	; 31
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_clear+0xa>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_clear+0x10>
 1fa:	00 00       	nop
	_delay_ms(2);        
	lcd_command (0x80);   
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
 202:	08 95       	ret

00000204 <lcd_print>:
}


void lcd_print (char *str)
{
 204:	fc 01       	movw	r30, r24
	
	int i;
	for(i=0; str[i]!=0; i++)
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	34 c0       	rjmp	.+104    	; 0x274 <lcd_print+0x70>
	{
		
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	98 2b       	or	r25, r24
 214:	92 bb       	out	0x12, r25	; 18
		lcd_port |= (1<<rs);
 216:	82 b3       	in	r24, 0x12	; 18
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	82 bb       	out	0x12, r24	; 18
		lcd_port|= (1<<en);
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_print+0x20>
 228:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	82 bb       	out	0x12, r24	; 18
 230:	8f e1       	ldi	r24, 0x1F	; 31
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_print+0x30>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_print+0x36>
 23a:	00 00       	nop
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
 23c:	42 b3       	in	r20, 0x12	; 18
 23e:	9c 91       	ld	r25, X
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	98 9f       	mul	r25, r24
 244:	90 01       	movw	r18, r0
 246:	11 24       	eor	r1, r1
 248:	94 2f       	mov	r25, r20
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	29 2b       	or	r18, r25
 24e:	22 bb       	out	0x12, r18	; 18
		lcd_port |= (1<<en);
 250:	92 b3       	in	r25, 0x12	; 18
 252:	92 60       	ori	r25, 0x02	; 2
 254:	92 bb       	out	0x12, r25	; 18
 256:	95 e0       	ldi	r25, 0x05	; 5
 258:	9a 95       	dec	r25
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_print+0x54>
 25c:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 25e:	92 b3       	in	r25, 0x12	; 18
 260:	9d 7f       	andi	r25, 0xFD	; 253
 262:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9f e1       	ldi	r25, 0x1F	; 31
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_print+0x64>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_print+0x6a>
 26e:	00 00       	nop

void lcd_print (char *str)
{
	
	int i;
	for(i=0; str[i]!=0; i++)
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	df 01       	movw	r26, r30
 276:	a6 0f       	add	r26, r22
 278:	b7 1f       	adc	r27, r23
 27a:	9c 91       	ld	r25, X
 27c:	91 11       	cpse	r25, r1
 27e:	c6 cf       	rjmp	.-116    	; 0x20c <lcd_print+0x8>
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_ms(2);
	}
}
 280:	08 95       	ret

00000282 <lcd_setCursor>:



void lcd_setCursor(unsigned char x, unsigned char y){    
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <lcd_setCursor+0x6>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};    
 28c:	90 e8       	ldi	r25, 0x80	; 128
 28e:	99 83       	std	Y+1, r25	; 0x01
 290:	90 ec       	ldi	r25, 0xC0	; 192
 292:	9a 83       	std	Y+2, r25	; 0x02
	lcd_command(adr[y-1] + x-1);
 294:	e6 2f       	mov	r30, r22
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	2c 0f       	add	r18, r28
 2a0:	3d 1f       	adc	r19, r29
 2a2:	e2 0f       	add	r30, r18
 2a4:	f3 1f       	adc	r31, r19
 2a6:	90 81       	ld	r25, Z
 2a8:	89 0f       	add	r24, r25
 2aa:	81 50       	subi	r24, 0x01	; 1
 2ac:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e8       	ldi	r24, 0x8F	; 143
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_setCursor+0x32>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_setCursor+0x38>
 2ba:	00 00       	nop
	_delay_us(100);
}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <main>:

int main()
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <main+0x6>
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <main+0x8>
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
	initialize();           
 2d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <initialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	81 ee       	ldi	r24, 0xE1	; 225
 2da:	94 e0       	ldi	r25, 0x04	; 4
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x16>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x20>
 2e6:	00 00       	nop
		_delay_ms(100);


		
		
		HCSR04Init();  // set io port direction of sensor
 2e8:	0e 94 49 00 	call	0x92	; 0x92 <HCSR04Init>


		  
		lcd_print("hello customer !");
 2ec:	80 e6       	ldi	r24, 0x60	; 96
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
 2f4:	8f e3       	ldi	r24, 0x3F	; 63
 2f6:	9c e9       	ldi	r25, 0x9C	; 156
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x32>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x38>
 2fe:	00 00       	nop
		_delay_ms(10);
		lcd_setCursor(1, 2); 
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
		lcd_print("enter your can");
 308:	81 e7       	ldi	r24, 0x71	; 113
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
 310:	9f ef       	ldi	r25, 0xFF	; 255
 312:	23 ed       	ldi	r18, 0xD3	; 211
 314:	80 e3       	ldi	r24, 0x30	; 48
 316:	91 50       	subi	r25, 0x01	; 1
 318:	20 40       	sbci	r18, 0x00	; 0
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x50>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x5a>
 320:	00 00       	nop
		_delay_ms(1000);
		lcd_clear();                                             
 322:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_clear>
		while(1)
		{
			
			HCSR04Trigger();     // calling the ultrasonic sound wave generator function
 326:	0e 94 4d 00 	call	0x9a	; 0x9a <HCSR04Trigger>
			
			r=GetPulseWidth();      // getting the duration of the ultrasound took echo back
 32a:	0e 94 57 00 	call	0xae	; 0xae <GetPulseWidth>
       
	        // handle errors
			if(r==US_ERROR)               
 32e:	8f 3f       	cpi	r24, 0xFF	; 255
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	92 07       	cpc	r25, r18
 334:	49 f4       	brne	.+18     	; 0x348 <main+0x82>
			{
				lcd_setCursor(1, 1);     
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				lcd_print("Error!");
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
 346:	ef cf       	rjmp	.-34     	; 0x326 <main+0x60>
			}
			else
			{
				
				distance=(r*0.034/2.0);	
 348:	bc 01       	movw	r22, r24
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 42 02 	call	0x484	; 0x484 <__floatunsisf>
 352:	26 e9       	ldi	r18, 0x96	; 150
 354:	33 e4       	ldi	r19, 0x43	; 67
 356:	4b e0       	ldi	r20, 0x0B	; 11
 358:	5d e3       	ldi	r21, 0x3D	; 61
 35a:	0e 94 a8 02 	call	0x550	; 0x550 <__mulsf3>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	5f e3       	ldi	r21, 0x3F	; 63
 366:	0e 94 a8 02 	call	0x550	; 0x550 <__mulsf3>
 36a:	0e 94 0c 02 	call	0x418	; 0x418 <__fixsfsi>
 36e:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <distance+0x1>
 372:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <distance>
				
				
				if (distance != previous_distance)    
 376:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <__data_end>
 37a:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <__data_end+0x1>
 37e:	26 17       	cp	r18, r22
 380:	37 07       	cpc	r19, r23
 382:	11 f0       	breq	.+4      	; 0x388 <main+0xc2>
				{
					lcd_clear();
 384:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_clear>
				}
				
				lcd_setCursor(1, 1);  
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				   
				
				if((distance>45)&&(distance<50))
 390:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <distance>
 394:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <distance+0x1>
 398:	8e 97       	sbiw	r24, 0x2e	; 46
 39a:	04 97       	sbiw	r24, 0x04	; 4
 39c:	48 f4       	brcc	.+18     	; 0x3b0 <main+0xea>
				{
					lcd_setCursor(1, 1); 
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
					lcd_print("can  detected");
 3a6:	87 e8       	ldi	r24, 0x87	; 135
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <main+0xfa>
					
				}
				else
				{
					lcd_setCursor(3, 1); 
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
					lcd_print("can not detected");
 3b8:	85 e9       	ldi	r24, 0x95	; 149
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3c0:	4a e0       	ldi	r20, 0x0A	; 10
 3c2:	be 01       	movw	r22, r28
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <distance>
 3cc:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <distance+0x1>
 3d0:	0e 94 3d 03 	call	0x67a	; 0x67a <__itoa_ncheck>
				}
				
				     
				itoa(distance, numberString, 10);   // converting
				lcd_setCursor(8, 2);  
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	88 e0       	ldi	r24, 0x08	; 8
 3d8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				lcd_print(numberString); 
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
				lcd_setCursor(10, 2);   
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_setCursor>
				lcd_print(" cm");
 3ec:	86 ea       	ldi	r24, 0xA6	; 166
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 02 01 	call	0x204	; 0x204 <lcd_print>
				
				
				
				
				previous_distance = distance;
 3f4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <distance>
 3f8:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <distance+0x1>
 3fc:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__data_end+0x1>
 400:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	96 e7       	ldi	r25, 0x76	; 118
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	20 40       	sbci	r18, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	87 cf       	rjmp	.-242    	; 0x326 <main+0x60>

00000418 <__fixsfsi>:
 418:	0e 94 13 02 	call	0x426	; 0x426 <__fixunssfsi>
 41c:	68 94       	set
 41e:	b1 11       	cpse	r27, r1
 420:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_szero>
 424:	08 95       	ret

00000426 <__fixunssfsi>:
 426:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_splitA>
 42a:	88 f0       	brcs	.+34     	; 0x44e <__fixunssfsi+0x28>
 42c:	9f 57       	subi	r25, 0x7F	; 127
 42e:	98 f0       	brcs	.+38     	; 0x456 <__fixunssfsi+0x30>
 430:	b9 2f       	mov	r27, r25
 432:	99 27       	eor	r25, r25
 434:	b7 51       	subi	r27, 0x17	; 23
 436:	b0 f0       	brcs	.+44     	; 0x464 <__fixunssfsi+0x3e>
 438:	e1 f0       	breq	.+56     	; 0x472 <__fixunssfsi+0x4c>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	88 1f       	adc	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	1a f0       	brmi	.+6      	; 0x44a <__fixunssfsi+0x24>
 444:	ba 95       	dec	r27
 446:	c9 f7       	brne	.-14     	; 0x43a <__fixunssfsi+0x14>
 448:	14 c0       	rjmp	.+40     	; 0x472 <__fixunssfsi+0x4c>
 44a:	b1 30       	cpi	r27, 0x01	; 1
 44c:	91 f0       	breq	.+36     	; 0x472 <__fixunssfsi+0x4c>
 44e:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_zero>
 452:	b1 e0       	ldi	r27, 0x01	; 1
 454:	08 95       	ret
 456:	0c 94 a1 02 	jmp	0x542	; 0x542 <__fp_zero>
 45a:	67 2f       	mov	r22, r23
 45c:	78 2f       	mov	r23, r24
 45e:	88 27       	eor	r24, r24
 460:	b8 5f       	subi	r27, 0xF8	; 248
 462:	39 f0       	breq	.+14     	; 0x472 <__fixunssfsi+0x4c>
 464:	b9 3f       	cpi	r27, 0xF9	; 249
 466:	cc f3       	brlt	.-14     	; 0x45a <__fixunssfsi+0x34>
 468:	86 95       	lsr	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b3 95       	inc	r27
 470:	d9 f7       	brne	.-10     	; 0x468 <__fixunssfsi+0x42>
 472:	3e f4       	brtc	.+14     	; 0x482 <__fixunssfsi+0x5c>
 474:	90 95       	com	r25
 476:	80 95       	com	r24
 478:	70 95       	com	r23
 47a:	61 95       	neg	r22
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	08 95       	ret

00000484 <__floatunsisf>:
 484:	e8 94       	clt
 486:	09 c0       	rjmp	.+18     	; 0x49a <__floatsisf+0x12>

00000488 <__floatsisf>:
 488:	97 fb       	bst	r25, 7
 48a:	3e f4       	brtc	.+14     	; 0x49a <__floatsisf+0x12>
 48c:	90 95       	com	r25
 48e:	80 95       	com	r24
 490:	70 95       	com	r23
 492:	61 95       	neg	r22
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	8f 4f       	sbci	r24, 0xFF	; 255
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	99 23       	and	r25, r25
 49c:	a9 f0       	breq	.+42     	; 0x4c8 <__floatsisf+0x40>
 49e:	f9 2f       	mov	r31, r25
 4a0:	96 e9       	ldi	r25, 0x96	; 150
 4a2:	bb 27       	eor	r27, r27
 4a4:	93 95       	inc	r25
 4a6:	f6 95       	lsr	r31
 4a8:	87 95       	ror	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b7 95       	ror	r27
 4b0:	f1 11       	cpse	r31, r1
 4b2:	f8 cf       	rjmp	.-16     	; 0x4a4 <__floatsisf+0x1c>
 4b4:	fa f4       	brpl	.+62     	; 0x4f4 <__floatsisf+0x6c>
 4b6:	bb 0f       	add	r27, r27
 4b8:	11 f4       	brne	.+4      	; 0x4be <__floatsisf+0x36>
 4ba:	60 ff       	sbrs	r22, 0
 4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <__floatsisf+0x6c>
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	8f 4f       	sbci	r24, 0xFF	; 255
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <__floatsisf+0x6c>
 4c8:	88 23       	and	r24, r24
 4ca:	11 f0       	breq	.+4      	; 0x4d0 <__floatsisf+0x48>
 4cc:	96 e9       	ldi	r25, 0x96	; 150
 4ce:	11 c0       	rjmp	.+34     	; 0x4f2 <__floatsisf+0x6a>
 4d0:	77 23       	and	r23, r23
 4d2:	21 f0       	breq	.+8      	; 0x4dc <__floatsisf+0x54>
 4d4:	9e e8       	ldi	r25, 0x8E	; 142
 4d6:	87 2f       	mov	r24, r23
 4d8:	76 2f       	mov	r23, r22
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <__floatsisf+0x5e>
 4dc:	66 23       	and	r22, r22
 4de:	71 f0       	breq	.+28     	; 0x4fc <__floatsisf+0x74>
 4e0:	96 e8       	ldi	r25, 0x86	; 134
 4e2:	86 2f       	mov	r24, r22
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	2a f0       	brmi	.+10     	; 0x4f4 <__floatsisf+0x6c>
 4ea:	9a 95       	dec	r25
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	da f7       	brpl	.-10     	; 0x4ea <__floatsisf+0x62>
 4f4:	88 0f       	add	r24, r24
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	97 f9       	bld	r25, 7
 4fc:	08 95       	ret

000004fe <__fp_split3>:
 4fe:	57 fd       	sbrc	r21, 7
 500:	90 58       	subi	r25, 0x80	; 128
 502:	44 0f       	add	r20, r20
 504:	55 1f       	adc	r21, r21
 506:	59 f0       	breq	.+22     	; 0x51e <__fp_splitA+0x10>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	71 f0       	breq	.+28     	; 0x528 <__fp_splitA+0x1a>
 50c:	47 95       	ror	r20

0000050e <__fp_splitA>:
 50e:	88 0f       	add	r24, r24
 510:	97 fb       	bst	r25, 7
 512:	99 1f       	adc	r25, r25
 514:	61 f0       	breq	.+24     	; 0x52e <__fp_splitA+0x20>
 516:	9f 3f       	cpi	r25, 0xFF	; 255
 518:	79 f0       	breq	.+30     	; 0x538 <__fp_splitA+0x2a>
 51a:	87 95       	ror	r24
 51c:	08 95       	ret
 51e:	12 16       	cp	r1, r18
 520:	13 06       	cpc	r1, r19
 522:	14 06       	cpc	r1, r20
 524:	55 1f       	adc	r21, r21
 526:	f2 cf       	rjmp	.-28     	; 0x50c <__fp_split3+0xe>
 528:	46 95       	lsr	r20
 52a:	f1 df       	rcall	.-30     	; 0x50e <__fp_splitA>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <__fp_splitA+0x30>
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	99 1f       	adc	r25, r25
 536:	f1 cf       	rjmp	.-30     	; 0x51a <__fp_splitA+0xc>
 538:	86 95       	lsr	r24
 53a:	71 05       	cpc	r23, r1
 53c:	61 05       	cpc	r22, r1
 53e:	08 94       	sec
 540:	08 95       	ret

00000542 <__fp_zero>:
 542:	e8 94       	clt

00000544 <__fp_szero>:
 544:	bb 27       	eor	r27, r27
 546:	66 27       	eor	r22, r22
 548:	77 27       	eor	r23, r23
 54a:	cb 01       	movw	r24, r22
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <__mulsf3>:
 550:	0e 94 bb 02 	call	0x576	; 0x576 <__mulsf3x>
 554:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_round>
 558:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscA>
 55c:	38 f0       	brcs	.+14     	; 0x56c <__mulsf3+0x1c>
 55e:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscB>
 562:	20 f0       	brcs	.+8      	; 0x56c <__mulsf3+0x1c>
 564:	95 23       	and	r25, r21
 566:	11 f0       	breq	.+4      	; 0x56c <__mulsf3+0x1c>
 568:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>
 56c:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_nan>
 570:	11 24       	eor	r1, r1
 572:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_szero>

00000576 <__mulsf3x>:
 576:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_split3>
 57a:	70 f3       	brcs	.-36     	; 0x558 <__mulsf3+0x8>

0000057c <__mulsf3_pse>:
 57c:	95 9f       	mul	r25, r21
 57e:	c1 f3       	breq	.-16     	; 0x570 <__mulsf3+0x20>
 580:	95 0f       	add	r25, r21
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	55 1f       	adc	r21, r21
 586:	62 9f       	mul	r22, r18
 588:	f0 01       	movw	r30, r0
 58a:	72 9f       	mul	r23, r18
 58c:	bb 27       	eor	r27, r27
 58e:	f0 0d       	add	r31, r0
 590:	b1 1d       	adc	r27, r1
 592:	63 9f       	mul	r22, r19
 594:	aa 27       	eor	r26, r26
 596:	f0 0d       	add	r31, r0
 598:	b1 1d       	adc	r27, r1
 59a:	aa 1f       	adc	r26, r26
 59c:	64 9f       	mul	r22, r20
 59e:	66 27       	eor	r22, r22
 5a0:	b0 0d       	add	r27, r0
 5a2:	a1 1d       	adc	r26, r1
 5a4:	66 1f       	adc	r22, r22
 5a6:	82 9f       	mul	r24, r18
 5a8:	22 27       	eor	r18, r18
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	62 1f       	adc	r22, r18
 5b0:	73 9f       	mul	r23, r19
 5b2:	b0 0d       	add	r27, r0
 5b4:	a1 1d       	adc	r26, r1
 5b6:	62 1f       	adc	r22, r18
 5b8:	83 9f       	mul	r24, r19
 5ba:	a0 0d       	add	r26, r0
 5bc:	61 1d       	adc	r22, r1
 5be:	22 1f       	adc	r18, r18
 5c0:	74 9f       	mul	r23, r20
 5c2:	33 27       	eor	r19, r19
 5c4:	a0 0d       	add	r26, r0
 5c6:	61 1d       	adc	r22, r1
 5c8:	23 1f       	adc	r18, r19
 5ca:	84 9f       	mul	r24, r20
 5cc:	60 0d       	add	r22, r0
 5ce:	21 1d       	adc	r18, r1
 5d0:	82 2f       	mov	r24, r18
 5d2:	76 2f       	mov	r23, r22
 5d4:	6a 2f       	mov	r22, r26
 5d6:	11 24       	eor	r1, r1
 5d8:	9f 57       	subi	r25, 0x7F	; 127
 5da:	50 40       	sbci	r21, 0x00	; 0
 5dc:	9a f0       	brmi	.+38     	; 0x604 <__mulsf3_pse+0x88>
 5de:	f1 f0       	breq	.+60     	; 0x61c <__mulsf3_pse+0xa0>
 5e0:	88 23       	and	r24, r24
 5e2:	4a f0       	brmi	.+18     	; 0x5f6 <__mulsf3_pse+0x7a>
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	bb 1f       	adc	r27, r27
 5ea:	66 1f       	adc	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	91 50       	subi	r25, 0x01	; 1
 5f2:	50 40       	sbci	r21, 0x00	; 0
 5f4:	a9 f7       	brne	.-22     	; 0x5e0 <__mulsf3_pse+0x64>
 5f6:	9e 3f       	cpi	r25, 0xFE	; 254
 5f8:	51 05       	cpc	r21, r1
 5fa:	80 f0       	brcs	.+32     	; 0x61c <__mulsf3_pse+0xa0>
 5fc:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_inf>
 600:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_szero>
 604:	5f 3f       	cpi	r21, 0xFF	; 255
 606:	e4 f3       	brlt	.-8      	; 0x600 <__mulsf3_pse+0x84>
 608:	98 3e       	cpi	r25, 0xE8	; 232
 60a:	d4 f3       	brlt	.-12     	; 0x600 <__mulsf3_pse+0x84>
 60c:	86 95       	lsr	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b7 95       	ror	r27
 614:	f7 95       	ror	r31
 616:	e7 95       	ror	r30
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	c1 f7       	brne	.-16     	; 0x60c <__mulsf3_pse+0x90>
 61c:	fe 2b       	or	r31, r30
 61e:	88 0f       	add	r24, r24
 620:	91 1d       	adc	r25, r1
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__fp_inf>:
 62a:	97 f9       	bld	r25, 7
 62c:	9f 67       	ori	r25, 0x7F	; 127
 62e:	80 e8       	ldi	r24, 0x80	; 128
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	08 95       	ret

00000636 <__fp_nan>:
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	08 95       	ret

0000063c <__fp_pscA>:
 63c:	00 24       	eor	r0, r0
 63e:	0a 94       	dec	r0
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	09 06       	cpc	r0, r25
 648:	08 95       	ret

0000064a <__fp_pscB>:
 64a:	00 24       	eor	r0, r0
 64c:	0a 94       	dec	r0
 64e:	12 16       	cp	r1, r18
 650:	13 06       	cpc	r1, r19
 652:	14 06       	cpc	r1, r20
 654:	05 06       	cpc	r0, r21
 656:	08 95       	ret

00000658 <__fp_round>:
 658:	09 2e       	mov	r0, r25
 65a:	03 94       	inc	r0
 65c:	00 0c       	add	r0, r0
 65e:	11 f4       	brne	.+4      	; 0x664 <__fp_round+0xc>
 660:	88 23       	and	r24, r24
 662:	52 f0       	brmi	.+20     	; 0x678 <__fp_round+0x20>
 664:	bb 0f       	add	r27, r27
 666:	40 f4       	brcc	.+16     	; 0x678 <__fp_round+0x20>
 668:	bf 2b       	or	r27, r31
 66a:	11 f4       	brne	.+4      	; 0x670 <__fp_round+0x18>
 66c:	60 ff       	sbrs	r22, 0
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__fp_round+0x20>
 670:	6f 5f       	subi	r22, 0xFF	; 255
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__itoa_ncheck>:
 67a:	bb 27       	eor	r27, r27
 67c:	4a 30       	cpi	r20, 0x0A	; 10
 67e:	31 f4       	brne	.+12     	; 0x68c <__itoa_ncheck+0x12>
 680:	99 23       	and	r25, r25
 682:	22 f4       	brpl	.+8      	; 0x68c <__itoa_ncheck+0x12>
 684:	bd e2       	ldi	r27, 0x2D	; 45
 686:	90 95       	com	r25
 688:	81 95       	neg	r24
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	0c 94 49 03 	jmp	0x692	; 0x692 <__utoa_common>

00000690 <__utoa_ncheck>:
 690:	bb 27       	eor	r27, r27

00000692 <__utoa_common>:
 692:	fb 01       	movw	r30, r22
 694:	55 27       	eor	r21, r21
 696:	aa 27       	eor	r26, r26
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	aa 1f       	adc	r26, r26
 69e:	a4 17       	cp	r26, r20
 6a0:	10 f0       	brcs	.+4      	; 0x6a6 <__utoa_common+0x14>
 6a2:	a4 1b       	sub	r26, r20
 6a4:	83 95       	inc	r24
 6a6:	50 51       	subi	r21, 0x10	; 16
 6a8:	b9 f7       	brne	.-18     	; 0x698 <__utoa_common+0x6>
 6aa:	a0 5d       	subi	r26, 0xD0	; 208
 6ac:	aa 33       	cpi	r26, 0x3A	; 58
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__utoa_common+0x20>
 6b0:	a9 5d       	subi	r26, 0xD9	; 217
 6b2:	a1 93       	st	Z+, r26
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	79 f7       	brne	.-34     	; 0x696 <__utoa_common+0x4>
 6b8:	b1 11       	cpse	r27, r1
 6ba:	b1 93       	st	Z+, r27
 6bc:	11 92       	st	Z+, r1
 6be:	cb 01       	movw	r24, r22
 6c0:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <strrev>

000006c4 <strrev>:
 6c4:	dc 01       	movw	r26, r24
 6c6:	fc 01       	movw	r30, r24
 6c8:	67 2f       	mov	r22, r23
 6ca:	71 91       	ld	r23, Z+
 6cc:	77 23       	and	r23, r23
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <strrev+0x4>
 6d0:	32 97       	sbiw	r30, 0x02	; 2
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <strrev+0x18>
 6d4:	7c 91       	ld	r23, X
 6d6:	6d 93       	st	X+, r22
 6d8:	70 83       	st	Z, r23
 6da:	62 91       	ld	r22, -Z
 6dc:	ae 17       	cp	r26, r30
 6de:	bf 07       	cpc	r27, r31
 6e0:	c8 f3       	brcs	.-14     	; 0x6d4 <strrev+0x10>
 6e2:	08 95       	ret

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
